{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/actions.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","hooks/useI18n.ts","components/layout/Page.tsx","contexts/BlockContext.tsx","utils/multicall.ts","components/layout/Container.tsx","utils/translateTextHelpers.ts","config/constants/types.ts","config/constants/contracts.ts","config/constants/pools.ts","utils/addressHelpers.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","contexts/Localisation/translationsContext.ts"],"names":["fetchFarmsQuoteTokenPrice","farms","bnbBusdFarm","find","f","pid","tmdsBnbFarm","bnbPrice","BigNumber","tokenPriceVsQuote","tmdsPrice","times","map","farm","quoteTokenPrice","quoteTokenSymbol","QuoteToken","BNB","TMDS","lpTokenPrice","toJSON","fetchFarms","a","Promise","all","farmsConfig","farmConfig","lpAdress","lpAddresses","CHAIN_ID","multicall","masterchefABI","address","getMasterChefAddress","name","params","info","totalAllocPoint","tmdsPerBlock","allocPoint","_hex","poolWeight","div","lpTokenBalanceMC","lpSupply","calls","tokenAddresses","quoteTokenAdresses","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTotalSupply","tokenDecimals","quoteTokenDecimals","isTokenOnly","tokenAmount","pow","tokenSymbol","BUSD","lpTotalInQuoteToken","lpTokenRatio","quoteTokenAmount","comparedTo","toNumber","multiplier","toString","depositFeeBP","harvestInterval","data","fetchFarmUserAllowances","account","masterChefAdress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","fetchPoolsPublicDataAsync","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","bnbPriceUSD","useTotalValue","value","i","length","val","plus","pool","totalStaked","stakingTokenFarm","s","stakingTokenName","stakingTokenPriceInUsd","poolCategory","PoolCategory","BINANCE","stakingTokenDecimals","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","useI18n","translations","TranslationsContext","translationId","fallback","getTranslation","Page","styled","Container","theme","mediaQueries","sm","lg","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","abi","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","variableRegex","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","TranslateString","cake","56","97","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","usdt","getCakeAddress","addresses","chainId","getLotteryAddress","getLotteryTicketAddress","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig","filter","p","sousId","callsStartBlock","poolConfig","contractAddress","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","startBlock","endBlock","fetchPoolsFee","callsDepositFee","fees","depositFee","fetchPoolsStakeLimit","callsStakeLimit","stakeLimits","limitPerUser","stakeLimit","fetchPoolsTotalStatking","oldPools","newPools","callsOldPools","stakingTokenAddress","callsNewPools","cakeABI","oldPoolsTotalStaked","newPoolsTotalStaked","fetchFegPrice","fetch","response","json","priceData","price","fetchQuaPrice","nonBnbPools","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingTmds","pendingReward","fegPrice","quaPrice","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","blockLimits","totalStakings","liveData","blockLimit","totalStaking","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","then","r","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","setIsDark","prevState","JSON","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","initialOpenState","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","rugDocLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","document","location","Home","lazy","Farms","Ifos","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState"],"mappings":"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","file":"static/js/main.0f2e1751.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n\r\n      const [info, totalAllocPoint, tmdsPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'tmdsPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n      const lpTokenBalanceMC = new BigNumber(info.lpSupply._hex)\r\n\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        // {\r\n        //   address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n        //   name: 'balanceOf',\r\n        //   params: [getMasterChefAddress()],\r\n        // },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        // lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals))\r\n            .div(new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals))\r\n            .div(new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)));\r\n        }\r\n      }\r\n\r\n      const quoteTokenPrice = new BigNumber(1)\r\n\r\n      let lpTokenPrice = new BigNumber(0)\r\n      if (farmConfig.isTokenOnly) {\r\n        lpTokenPrice = tokenPriceVsQuote.times(quoteTokenPrice)\r\n      } else {\r\n        lpTokenPrice = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(new BigNumber(2))\r\n          .times(quoteTokenPrice)\r\n          .div(new BigNumber(lpTotalSupply).div(new BigNumber(10).pow(18)))\r\n      }\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        quoteTokenPrice: quoteTokenPrice.toJSON(),\r\n        lpTokenPrice: lpTokenPrice.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        harvestInterval: new BigNumber(info.harvestInterval._hex).toNumber(),\r\n        tmdsPerBlock: new BigNumber(tmdsPerBlock).toNumber(),\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport const fetchFarmsQuoteTokenPrice = (farms) => {\r\n  const bnbBusdPid = 3\r\n  const tmdsBnbPid = 0\r\n  const bnbBusdFarm = farms.find((f) => f.pid === bnbBusdPid)\r\n  const tmdsBnbFarm = farms.find((f) => f.pid === tmdsBnbPid)\r\n\r\n  const bnbPrice = new BigNumber(bnbBusdFarm.tokenPriceVsQuote)\r\n  const tmdsPrice = new BigNumber(tmdsBnbFarm.tokenPriceVsQuote).times(bnbPrice)\r\n\r\n  return farms.map((farm) => {\r\n    let quoteTokenPrice = new BigNumber(1)\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      quoteTokenPrice = bnbPrice\r\n    } else if (farm.quoteTokenSymbol === QuoteToken.TMDS) {\r\n      quoteTokenPrice = tmdsPrice\r\n    }\r\n    const lpTokenPrice = new BigNumber(farm.lpTokenPrice).times(quoteTokenPrice)\r\n    return { ...farm, quoteTokenPrice: quoteTokenPrice.toJSON(), lpTokenPrice: lpTokenPrice.toJSON() }\r\n  })\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingTmds',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms, { fetchFarmsQuoteTokenPrice } from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  let farms = await fetchFarms()\r\n  farms = fetchFarmsQuoteTokenPrice(farms)\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { PoolCategory, QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolsPublic = (): Pool[] => {\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 3 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // TMDS-BNB LP\r\n  const farm = useFarmFromPid(pid);\r\n  const bnbPriceUSD = usePriceBnbBusd()\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote).times(bnbPriceUSD) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const pools = usePoolsPublic()\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      const val = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPrice)\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const pool = pools[i]\r\n    if (pool.totalStaked) {\r\n      const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName\r\n        || `${s.tokenSymbol}-${s.quoteTokenSymbol}` === pool.stakingTokenName)\r\n      const stakingTokenPriceInUsd = pool.poolCategory === PoolCategory.BINANCE ? new BigNumber(1)\r\n        : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote).times(stakingTokenFarm?.quoteTokenPrice)\r\n      value = value.plus(new BigNumber(pool.totalStaked).div(new BigNumber(10).pow(pool.stakingTokenDecimals)).times(stakingTokenPriceInUsd))\r\n    }\r\n  }\r\n\r\n  return value;\r\n}\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 1200px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'USDT' = 'USDT',\r\n  'TMDS' = 'TMDS'\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  tokenDecimals?: number\r\n  quoteTokenDecimals?: number\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n  stakingTokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","export default {\r\n  cake: {\r\n    56: '0xDa5c6c28F7705dD0aCCc0EF1CaB9185ecC494790',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0x7289B220746de46C2C9FcFB1775340CA23c28c39',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n  usdt: {\r\n    56: '0x55d398326f99059ff775485246999027b3197955',\r\n    97: '',\r\n  }\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'DOGE',\r\n  //   stakingTokenName: QuoteToken.TMDS,\r\n  //   stakingTokenAddress: '0xd22246644d2BE5d0427a8E474477d96677C3eC24',\r\n  //   contractAddress: {\r\n  //     97: '',\r\n  //     56: '0xe6164b5904e4ED8cc30F3FE49055055814f46CE8',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://dogecoin.com',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.6',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 8,\r\n  //   stakingTokenDecimals: 18\r\n  // },\r\n  // {\r\n  //   sousId: 2,\r\n  //   tokenName: 'DOGE',\r\n  //   stakingTokenName: QuoteToken.TMDS,\r\n  //   stakingTokenAddress: '0xd22246644d2BE5d0427a8E474477d96677C3eC24',\r\n  //   contractAddress: {\r\n  //     97: '',\r\n  //     56: '0xf6697F2cDE68c03E577De57F058EB17C9dDdfA5F',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://dogecoin.com',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '0.0347',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 8,\r\n  //   stakingTokenDecimals: 18\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChefNew.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsFee = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsDepositFee = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'depositFee',\r\n    }\r\n  })\r\n\r\n  const fees = await multicall(sousChefABI, callsDepositFee)\r\n  \r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const depositFee = fees[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      depositFee: new BigNumber(depositFee).toNumber(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsStakeLimit = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStakeLimit = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'poolLimitPerUser',\r\n    }\r\n  })\r\n\r\n  const stakeLimits = await multicall(sousChefABI, callsStakeLimit)\r\n  \r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const limitPerUser = stakeLimits[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      stakeLimit: new BigNumber(limitPerUser).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStatking = async () => {\r\n  const oldPools = poolsConfig.filter((p) => p.sousId < 8)\r\n  const newPools = poolsConfig.filter((p) => p.sousId >= 8)\r\n\r\n  const callsOldPools = oldPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.stakingTokenAddress,\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const callsNewPools = newPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'stakedSupply'\r\n    }\r\n  })\r\n\r\n  const oldPoolsTotalStaked = await multicall(cakeABI, callsOldPools)\r\n  const newPoolsTotalStaked = await multicall(sousChefABI, callsNewPools)\r\n\r\n  return [\r\n    ...oldPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(oldPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...newPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(newPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n\r\nexport const fetchFegPrice = async () => {\r\n  const response = await fetch(`https://api.pancakeswap.info/api/v2/tokens/0xacfc95585d80ab62f67a14c566c1b7a49fe91167`)\r\n  const priceData = await response.json()\r\n  \r\n  return priceData?.data?.price\r\n}\r\n\r\nexport const fetchQuaPrice = async () => {\r\n  const response = await fetch(`https://api.pancakeswap.info/api/v2/tokens/0x21ed4f0669872a55cab53c0d9de65c7e4a7ea2c3`)\r\n  const priceData = await response.json()\r\n  \r\n  return priceData?.data?.price\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChefNew.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingTmds('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport BigNumber from 'bignumber.js'\r\nimport { fetchFegPrice, fetchPoolsBlockLimits, fetchPoolsFee, fetchPoolsStakeLimit, fetchPoolsTotalStatking, fetchQuaPrice } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig], fegPrice: 0, quaPrice: 0 }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload.data\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n      state.fegPrice = action.payload.fegPrice || state.fegPrice\r\n      state.quaPrice = action.payload.quaPrice || state.quaPrice\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const fees = await fetchPoolsFee()\r\n  const stakeLimits = await fetchPoolsStakeLimit()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n  const fegPrice = await fetchFegPrice()\r\n  const quaPrice = await fetchQuaPrice()\r\n  \r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const depositFee = fees.find((entry) => entry.sousId === pool.sousId)\r\n    const stakeLimit = stakeLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...depositFee,\r\n      ...stakeLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData({ data: liveData, fegPrice, quaPrice }))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  // Farms\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    lpSymbol: 'TMDS-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd4d2b316f10b190003530b5cce54d26ab1e251dd',\r\n    },\r\n    tokenSymbol: 'TMDS',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xDa5c6c28F7705dD0aCCc0EF1CaB9185ecC494790',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 5,\r\n    lpSymbol: 'SMD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5609a4d02D5e8aF043f640319A94E94890d4b7e7',\r\n    },\r\n    tokenSymbol: 'SMD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2b31b83d2a960d648e9c8d3b84df5452c80ab947',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 2,\r\n    risk: 5,\r\n    lpSymbol: 'SMD-TMDS LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x9a911108e315c0fd299140dae8f8c1c71fb7bfdb',\r\n    },\r\n    tokenSymbol: 'SMD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2b31b83d2a960d648e9c8d3b84df5452c80ab947',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.TMDS,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n  {\r\n    pid: 3,\r\n    risk: 3,\r\n    lpSymbol: 'BNB-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x51BA779FdD1968d08f003f08024D0A3b7531438a',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  \r\n\r\n  // Pools\r\n  {\r\n    pid: 4,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'TMDS',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd4d2b316f10b190003530b5cce54d26ab1e251dd', // TMDS-BNB LP\r\n    },\r\n    tokenSymbol: 'TMDS',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xDa5c6c28F7705dD0aCCc0EF1CaB9185ecC494790',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 5,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'SMD',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x5609a4d02D5e8aF043f640319A94E94890d4b7e7', // SMD-BNB LP\r\n    },\r\n    tokenSymbol: 'SMD',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x2b31b83d2a960d648e9c8d3b84df5452c80ab947',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 6,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'WBNB',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0xd4d2b316f10b190003530b5cce54d26ab1e251dd', // TMDS-BNB LP\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.TMDS,\r\n    quoteTokenAdresses: contracts.cake,\r\n  },\r\n]\r\n\r\n\r\nexport default farms\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PantherTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PantherTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Mitr', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n    \r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    // return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n    return true\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    initialOpenState: true,\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://dev.dex.tremendousswap.com',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://dev.dex.tremendousswap.com/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pools',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  \r\n  {\r\n    label: 'ITO',\r\n    icon: 'IfoIcon',\r\n    href: '/ito',\r\n  },\r\n  {\r\n    label: 'Audits',\r\n    icon: 'ShieldIcon',\r\n    href: '#',\r\n  },\r\n  {\r\n    label: 'Listings',\r\n    icon: 'ListingIcon',\r\n    items: [\r\n      {\r\n        label: 'BscScan',\r\n        href: 'https://bscscan.com/token/0xDa5c6c28F7705dD0aCCc0EF1CaB9185ecC494790',\r\n      },\r\n      {\r\n        label: 'Poocoin',\r\n        href: 'https://poocoin.app/tokens/0xda5c6c28f7705dd0accc0ef1cab9185ecc494790',\r\n      },\r\n      {\r\n        label: 'CoinGecko',\r\n        href: '#',\r\n      },\r\n      {\r\n        label: 'CoinMarketCap',\r\n        href: 'https://coinmarketcap.com/currencies/tremendouscoin/',\r\n      }\r\n    ],\r\n  },\r\n  {\r\n    label: 'More',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: 'Github',\r\n        href: 'https://github.com/Tremendous-Coin',\r\n      },\r\n      {\r\n        label: 'Website',\r\n        href: 'https://tremendouscoin.com/',\r\n      }\r\n    ],\r\n  },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"https://bscscan.com/token/0xDa5c6c28F7705dD0aCCc0EF1CaB9185ecC494790\"\r\n      rugDocLink=\"https://rugdoc.io/project/flatswap/\"\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { Nft } from './types'\r\n\r\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\r\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n    previewImage: 'swapsies-preview.png',\r\n    blurImage: 'swapsies-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n    previewImage: 'drizzle-preview.png',\r\n    blurImage: 'drizzle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n    previewImage: 'blueberries-preview.png',\r\n    blurImage: 'blueberries-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n    previewImage: 'circular-preview.png',\r\n    blurImage: 'circular-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n    previewImage: 'sparkle-preview.png',\r\n    blurImage: 'sparkle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\nconst Pools = lazy(() => import('./views/Pools'))\r\nconst Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode />\r\n            </Route>\r\n            {/* <Route path=\"/pools\">\r\n              <Pools />\r\n            </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            <Route path=\"/ito\">\r\n              <Ifos />\r\n            </Route>\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n"],"sourceRoot":""}