{"version":3,"sources":["utils/formatBalance.ts","hooks/useContract.ts","utils/callHelpers.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","config/constants/index.ts","hooks/useWeb3.ts"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","useContract","abi","address","contractOptions","web3","useWeb3","useState","eth","Contract","contract","setContract","useEffect","useERC20","erc20","useCake","getCakeAddress","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","getMasterChefAddress","useSousChef","id","config","poolsConfig","find","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","REFERRAL_KEY","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","referrer","localStorage","getItem","deposit","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","times","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","useWallet","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","isUsingBnb","handleHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","farmsConfig","filter","farm","isCommunity","map","tokenSymbol","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","ethereum","refEth","useRef","setweb3","current"],"mappings":"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","file":"static/js/1.f3ffe742.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress } from 'utils/addressHelpers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport ifo from 'config/abi/ifo.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\r\nimport lottery from 'config/abi/lottery.json'\r\nimport lotteryTicket from 'config/abi/lotteryNft.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\n\r\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = useWeb3()\r\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\r\n\r\n  useEffect(() => {\r\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\r\n  }, [abi, address, contractOptions, web3])\r\n\r\n  return contract\r\n}\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoContract = (address: string) => {\r\n  const ifoAbi = (ifo as unknown) as AbiItem\r\n  return useContract(ifoAbi, address)\r\n}\r\n\r\nexport const useERC20 = (address: string) => {\r\n  const erc20Abi = (erc20 as unknown) as AbiItem\r\n  return useContract(erc20Abi, address)\r\n}\r\n\r\nexport const useCake = () => {\r\n  return useERC20(getCakeAddress())\r\n}\r\n\r\nexport const useRabbitMintingFarm = (address: string) => {\r\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\r\n  return useContract(rabbitMintingFarmAbi, address)\r\n}\r\n\r\nexport const usePancakeRabbits = (address: string) => {\r\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\r\n  return useContract(pancakeRabbitsAbi, address)\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const abi = (lottery as unknown) as AbiItem\r\n  return useContract(abi, getLotteryAddress())\r\n}\r\n\r\nexport const useLotteryTicket = () => {\r\n  const abi = (lotteryTicket as unknown) as AbiItem\r\n  return useContract(abi, getLotteryTicketAddress())\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const abi = (masterChef as unknown) as AbiItem\r\n  return useContract(abi, getMasterChefAddress())\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  const abi = (rawAbi as unknown) as AbiItem\r\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\r\n}\r\n\r\nexport default useContract\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nconst REFERRAL_KEY = 'GLOCSW_REFERRER'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  const referrer = localStorage.getItem(REFERRAL_KEY) ? localStorage.getItem(REFERRAL_KEY) : account\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).toString(), referrer)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  const referrer = localStorage.getItem(REFERRAL_KEY) ? localStorage.getItem(REFERRAL_KEY) : account\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0', referrer)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { connect, reset } = useWallet()\r\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import farmsConfig from './farms'\r\n\r\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\r\n\r\nexport { farmsConfig, communityFarms }\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n"],"sourceRoot":""}