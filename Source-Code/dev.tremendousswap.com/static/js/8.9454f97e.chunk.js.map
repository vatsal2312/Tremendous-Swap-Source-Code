{"version":3,"sources":["utils/erc20.ts","components/Input/Input.tsx","hooks/useHarvest.ts","hooks/useApprove.ts","hooks/useStake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/TokenInput/TokenInput.tsx","hooks/useUnstake.ts","components/layout/Flex.tsx","utils/getTimePeriods.ts","components/Tags.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Fee.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/components/SearchInput.tsx","views/Farms/Farms.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousChef","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","useApprove","onApprove","approve","tx","useSousApprove","updateUserAllowance","useIfoApprove","tokenContract","spenderAddress","ethers","constants","MaxUint256","send","from","useSousStake","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","onStake","useStake","console","info","StyledSpacer","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","unstake","sousEmegencyUnstake","sousUnstake","useUnstake","FlexLayout","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getShortFormatTime","seconds","Math","ceil","getTimePeriods","delta","timeLeft","years","months","days","hours","minutes","floor","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","liquidityAddUrl","swapUrl","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","tokenSymbol","risk","depositFee","alignItems","mb","style","width","height","position","src","alt","left","top","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","tokenDecimals","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","trim","pow","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","stakedPrice","rawStakedBalance","getBalanceNumber","displayBalance","displayBalanceInBUSD","toNumber","undefined","minimumFractionDigits","maximumFractionDigits","useModal","onPresentDeposit","onPresentWithdraw","paddingTop","fontSize","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","CAKE_DECIMALS","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","textTransform","pr","lpTokenPrice","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","totalValue","lpTotalInQuoteToken","quoteTokenPrice","Number","farmAPY","lpPrice","display","harvestInterval","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","displayApr","Label","img","mediaQueries","sm","Farm","image","label","tokens","split","marginLeft","Amount","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","zIndices","modal","Tooltip","content","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","xl","Liquidity","liquidity","displayLiquidity","FeeWrapper","TextFeeHightlight","isDark","Fee","fee","ActionContainer","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","usePriceCakeBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","useWeb3","displayBalanceUsd","StyledLink","StakeContainer","LpPriceContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","dual","replace","bsc","lpTokenPriceFormated","StakedAction","ViewMode","ContentContainer","CellLayout","MobileColumnSchema","id","normal","name","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","cellLabel","key","isXs","columnNames","column","Object","keys","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","forwardRef","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","shadows","inset","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","inputBorder","level1","DropDownList","ul","ListItem","li","Select","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Farms","farmsProps","path","pathname","useLocation","farmsLP","useFarms","usePriceBnbBusd","query","setQuery","setViewMode","sortOption","setSortOption","tokenMode","fastRefresh","useRefresh","stakedOnly","setStakedOnly","activeFarms","filter","inactiveFarms","tableRef","stackedOnlyFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPY","cakeRewardPerYear","tmdsPerBlock","poolWeight","BLOCKS_PER_YEAR","log","comparedTo","lowercaseQuery","isActive","farmsStaked","rowData","farms","sort","farm1","farm2","orderBy","slice","sortFarms","toLocaleLowerCase","Page","textAlign","checked","scale","event","target","b","exact","renderContent"],"mappings":"oRAMaA,EAAc,SAACC,EAAwBC,GAGlD,OADiB,IADJ,IAAIC,IAAKF,GACIG,IAAIC,UAAUC,EAA8BJ,IAI3DK,EAAY,uCAAG,WAC1BC,EACAC,EACAC,GAH0B,eAAAC,EAAA,+EAMQH,EAAWI,QAAQC,UAAUH,EAASD,EAAmBK,QAAQZ,SAASa,OANlF,cAMlBF,EANkB,yBAOjBA,GAPiB,yDASjB,KATiB,yDAAH,0DAaZG,EAAe,uCAAG,WAC7Bf,EACAgB,EACAC,GAH6B,iBAAAP,EAAA,6DAKvBQ,EAAWnB,EAAYC,EAAUgB,GALV,kBAOGE,EAASP,QAAQQ,UAAUF,GAAaH,OAP3C,cAOrBM,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,2D,ofCd5B,IAUMC,EAAqBC,IAAOC,IAAV,KAEF,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,SACjC,SAACH,GAAD,OAAWA,EAAMC,MAAMG,MAAMC,WAGjC,SAACL,GAAD,OAAWA,EAAMC,MAAMK,QAAQ,MAGxCC,EAAcT,IAAOK,MAAV,KAIN,SAACH,GAAD,OAAWA,EAAMC,MAAMC,OAAOM,WAS1BC,IAhCqB,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAC1F,OACE,eAACjB,EAAD,aACKgB,GAAkBA,EACrB,cAACN,EAAD,CAAaK,YAAaA,EAAaE,MAAOA,EAAOH,SAAUA,MAC5DD,GAAgBA,O,6NCTZK,EAAa,SAACC,GACzB,IAAMC,EAAWC,cACTjC,EAAYkC,cAAZlC,QACFD,EAAqBoC,cAQ3B,MAAO,CAAEC,SANaC,sBAAW,sBAAC,4BAAApC,EAAA,sEACXqC,YAAQvC,EAAoBgC,EAAS/B,GAD1B,cAC1BuC,EAD0B,OAEhCP,EAASQ,YAAuBxC,IAFA,kBAGzBuC,GAHyB,2CAI/B,CAACvC,EAASgC,EAAUD,EAAShC,MAKrB0C,EAAgB,SAACC,GAAwB,IAC5C1C,EAAYkC,cAAZlC,QACFD,EAAqBoC,cAU3B,MAAO,CAAEC,SARaC,sBAAW,sBAAC,4BAAApC,EAAA,6DAC1B0C,EAAkBD,EAASE,QAAO,SAACC,EAAOC,GAC9C,MAAM,GAAN,mBAAWD,GAAX,CAAkBP,YAAQvC,EAAoB+C,EAAK9C,OAClD,IAH6B,kBAKzB+C,QAAQC,IAAIL,IALa,2CAM/B,CAAC3C,EAAS0C,EAAU3C,MAKZkD,EAAiB,SAACC,GAAgC,IAAxBC,EAAuB,wDACtDnB,EAAWC,cAD2C,EAExCC,cAAZlC,EAFoD,EAEpDA,QACFoD,EAAmBC,YAAYH,GAC/BnD,EAAqBoC,cAErBmB,EAAgBjB,sBAAW,sBAAC,sBAAApC,EAAA,yDACjB,IAAXiD,EAD4B,gCAExBZ,YAAQvC,EAAoB,EAAGC,GAFP,kCAGrBmD,EAHqB,iCAIxBI,YAAgBH,EAAkBpD,GAJV,gDAMxBwD,YAAaJ,EAAkBpD,GANP,QAQhCgC,EAASyB,YAAwBP,EAAQlD,IACzCgC,EAAS0B,YAAkBR,EAAQlD,IATH,4CAU/B,CAACA,EAASgC,EAAUmB,EAAYpD,EAAoBqD,EAAkBF,IAEzE,MAAO,CAAEd,SAAUkB,K,8NC5CRK,EAAa,SAAC7D,GACzB,IAAMkC,EAAWC,cACTjC,EAAiCkC,cAAjClC,QACFD,EAAqBoC,cAY3B,MAAO,CAAEyB,UAVavB,sBAAW,sBAAC,4BAAApC,EAAA,+EAEb4D,YAAQ/D,EAAYC,EAAoBC,GAF3B,cAExB8D,EAFwB,OAG9B9B,EAASQ,YAAuBxC,IAHF,kBAIvB8D,GAJuB,0DAMvB,GANuB,yDAQ/B,CAAC9D,EAASgC,EAAUlC,EAAYC,MAMxBgE,EAAiB,SAACjE,EAAsBoD,GACnD,IAAMlB,EAAWC,cACTjC,EAAiCkC,cAAjClC,QACFoD,EAAmBC,YAAYH,GAYrC,MAAO,CAAEU,UAVavB,sBAAW,sBAAC,4BAAApC,EAAA,+EAEb4D,YAAQ/D,EAAYsD,EAAkBpD,GAFzB,cAExB8D,EAFwB,OAG9B9B,EAASgC,YAAoBd,EAAQlD,IAHP,kBAIvB8D,GAJuB,0DAMvB,GANuB,yDAQ/B,CAAC9D,EAASgC,EAAUlC,EAAYsD,EAAkBF,MAwB1Ce,EAAgB,SAACC,EAAyBC,GAA4B,IACzEnE,EAAYkC,cAAZlC,QAYR,OAXkBqC,sBAAW,sBAAC,4BAAApC,EAAA,+EAETiE,EAAchE,QAC5B2D,QAAQM,EAAgBC,SAAOC,UAAUC,YACzCC,KAAK,CAAEC,KAAMxE,IAJU,cAEpB8D,EAFoB,yBAKnBA,GALmB,0DAOnB,GAPmB,yDAS3B,CAAC9D,EAASmE,EAAgBD,M,iJCrDlBO,EAAe,SAACvB,GAAgC,IAAxBC,EAAuB,wDACpDnB,EAAWC,cADyC,EAEtCC,cAAZlC,EAFkD,EAElDA,QACFD,EAAqBoC,cACrBiB,EAAmBC,YAAYH,GAE/BwB,EAAcrC,sBAAW,uCAC7B,WAAOsC,GAAP,SAAA1E,EAAA,yDACiB,IAAXiD,EADN,gCAEU0B,YAAM7E,EAAoB,EAAG4E,EAAQ3E,GAF/C,kCAGamD,EAHb,iCAIU0B,YAAazB,EAAkBuB,EAAQ3E,GAJjD,gDAMU8E,YAAU1B,EAAkBuB,EAAQ3E,GAN9C,QAQEgC,EAAS+C,YAAwB7B,EAAQlD,IACzCgC,EAAS0B,YAAkBR,EAAQlD,IATrC,4CAD6B,sDAY7B,CAACA,EAASgC,EAAUmB,EAAYpD,EAAoBqD,EAAkBF,IAGxE,MAAO,CAAE8B,QAASN,IAGLO,IAzCE,SAACnC,GAChB,IAAMd,EAAWC,cACTjC,EAAYkC,cAAZlC,QACFD,EAAqBoC,cAW3B,MAAO,CAAE6C,QATW3C,sBAAW,uCAC7B,WAAOsC,GAAP,eAAA1E,EAAA,sEACuB2E,YAAM7E,EAAoB+C,EAAK6B,EAAQ3E,GAD9D,OACQuC,EADR,OAEEP,EAASQ,YAAuBxC,IAChCkF,QAAQC,KAAK5C,GAHf,2CAD6B,sDAM7B,CAACvC,EAASgC,EAAUjC,EAAoB+C,O,wNCX5C,IAuBMsC,EAAevE,IAAOC,IAAV,KACN,SAACC,GAAD,OAAWA,EAAMsE,QAClB,SAACtE,GAAD,OAAWA,EAAMsE,QAGbC,EA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDhE,EAAYmE,qBAAWC,KAAvBpE,QAGR,OAAQgE,GACN,IAAK,KACHE,EAAIlE,EAAQ,GACZ,MACF,IAAK,KACHkE,EAAIlE,EAAQ,GACZ,MACF,IAAK,KACL,QACEkE,EAAIlE,EAAQ,GAGhB,OAAO,cAAC+D,EAAD,CAAcC,KAAME,K,wRClB7B,IAcMG,EAAqB7E,IAAOC,IAAV,KAEF,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAO0E,eAGvC,SAAC5E,GAAD,OAAWA,EAAMC,MAAMK,QAAQ,MAGtCuE,EAAoB/E,IAAOC,IAAV,KAKR+E,EA3BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACE,cAACT,EAAD,UACGM,IAAMC,SAASG,IAAIN,GAAU,SAACO,EAAOC,GAAR,OAC5B,qCACE,cAACV,EAAD,UAAoBS,IACnBC,EAAIP,EAAI,GAAK,cAAC,EAAD,c,ytBCExB,IAoCMQ,EAAmB1F,IAAOC,IAAV,KAEhBsE,EAAevE,IAAOC,IAAV,KACP,SAACC,GAAD,OAAWA,EAAMC,MAAMK,QAAQ,MAGpCmF,EAA8B3F,IAAOC,IAAV,KAK3B2F,EAAgB5F,IAAOC,IAAV,KAER,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOM,WAQnCmF,EAAoB7F,IAAO8F,KAAV,KACZ,SAAC5F,GAAD,OAAWA,EAAMC,MAAMC,OAAOM,WAI1BqF,EA9D+B,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,IAAKC,EAA6D,EAA7DA,OAAQpF,EAAqD,EAArDA,SAAUqF,EAA2C,EAA3CA,YAAalF,EAA8B,EAA9BA,MAA8B,IAAvBmF,oBAAuB,MAAR,EAAQ,EAC3GC,EAAkBC,cACxB,OACE,eAACX,EAAD,WACE,eAACE,EAAD,WACGI,EAAIM,iBADP,IAC0BL,EAD1B,IACmCG,EAAgB,IAAK,gBAExD,cAACzF,EAAA,EAAD,CACEC,aACE,eAAC+E,EAAD,WACE,cAACE,EAAD,UAAoBI,IACpB,cAAC1B,EAAD,IACA,8BACE,cAAC,IAAD,CAAQC,KAAK,KAAK+B,QAASL,EAA3B,SACGE,EAAgB,IAAK,cAK9BvF,SAAUA,EACVC,YAAY,IACZE,MAAOA,IAGPmF,EAAe,EACb,eAACP,EAAD,WACGQ,EAAgB,MAAO,eAD1B,KAC4C,IAAII,IAAUxF,GAAS,GAAGyF,MAAMN,EAAa,KAAOO,WADhG,IAC6GT,KAG7G,U,iJCdJU,EAAW,GAEJC,EAAiB,SAACvE,GAC7B,IAAMlB,EAAWC,cACTjC,EAAYkC,cAAZlC,QACFD,EAAqBoC,cACrBiB,EAAmBC,YAAYH,GAC/BwE,EAAaF,EAASG,SAASzE,GAqBrC,MAAO,CAAE0E,UAnBavF,sBAAW,uCAC/B,WAAOsC,GAAP,mBAAA1E,EAAA,yDACiB,IAAXiD,EADN,gCAEyB2E,YAAQ9H,EAAoB,EAAG4E,EAAQ3E,GAFhE,OAEUuC,EAFV,OAGI2C,QAAQC,KAAK5C,GAHjB,2BAIamF,EAJb,kCAKyBI,YAAoB1E,EAAkBuB,EAAQ3E,GALvE,QAKUuC,EALV,OAMI2C,QAAQC,KAAK5C,GANjB,yCAQyBwF,YAAY3E,EAAkBuB,EAAQ3E,GAR/D,QAQUuC,EARV,OASI2C,QAAQC,KAAK5C,GATjB,QAWEP,EAAS+C,YAAwB7B,EAAQlD,IACzCgC,EAAS0B,YAAkBR,EAAQlD,IACnCgC,EAASyB,YAAwBP,EAAQlD,IAb3C,4CAD+B,sDAgB/B,CAACA,EAASgC,EAAU0F,EAAY3H,EAAoBqD,EAAkBF,MAM3D8E,IAhDI,SAAClF,GAClB,IAAMd,EAAWC,cACTjC,EAAYkC,cAAZlC,QACFD,EAAqBoC,cAW3B,MAAO,CAAEyF,UATavF,sBAAW,uCAC/B,WAAOsC,GAAP,eAAA1E,EAAA,sEACuB4H,YAAQ9H,EAAoB+C,EAAK6B,EAAQ3E,GADhE,OACQuC,EADR,OAEEP,EAASQ,YAAuBxC,IAChCkF,QAAQC,KAAK5C,GAHf,2CAD+B,sDAM/B,CAACvC,EAASgC,EAAUjC,EAAoB+C,O,oTCrB5C,IAAMmF,E,KAAapH,EAAOC,IAAV,KAaDmH,O,iCCff,sCACMC,EAAkB,KAClBC,EAAiB,MACjBC,EAAmB,OACnBC,EAAkB,SAEXC,EAAqB,SAACC,GACjC,OAAIA,GAAWH,EACP,GAAN,OAAUI,KAAKC,KAAKF,EAAUH,GAA9B,aAEEG,GAAWJ,EACP,GAAN,OAAUK,KAAKC,KAAKF,EAAUJ,GAA9B,WAEEI,GAAWL,EACP,GAAN,OAAUM,KAAKC,KAAKF,EAAUL,GAA9B,YAEEK,GAhBoB,GAiBhB,GAAN,OAAUC,KAAKC,KAAKF,EAjBE,IAiBtB,cAGI,GAAN,OAAUC,KAAKC,KAAKF,GAApB,eAkDaG,IAzCQ,SAACH,GACtB,IAAII,EAAQJ,EACNK,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTV,QAAS,GA8BX,OA3BII,GAASN,IACXO,EAASC,MAAQL,KAAKU,MAAMP,EAAQN,GACpCM,GAASC,EAASC,MAAQR,GAGxBM,GAASP,IACXQ,EAASE,OAASN,KAAKU,MAAMP,EAAQP,GACrCO,GAASC,EAASE,OAASV,GAGzBO,GAASR,IACXS,EAASG,KAAOP,KAAKU,MAAMP,EAAQR,GACnCQ,GAASC,EAASG,KAAOZ,GAGvBQ,GAAST,IACXU,EAASI,MAAQR,KAAKU,MAAMP,EAAQT,GACpCS,GAASC,EAASI,MAAQd,GAGxBS,GA5DoB,KA6DtBC,EAASK,QAAUT,KAAKU,MAAMP,EA7DR,IA8DtBA,GA9DsB,GA8DbC,EAASK,SAGpBL,EAASL,QAAUI,EAEZC,I,oMChEHO,EAAW,kBACf,cAAC,IAAD,CAAKC,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,sBAWIC,EAAU,kBACd,cAAC,IAAD,CAAKH,QAAQ,YAAYC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA5C,mBAKIE,EAAe,kBACnB,cAAC,IAAD,CAAKJ,QAAQ,aAAaC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA7C,wBAKIG,EAAa,kBACjB,cAAC,IAAD,CAAKL,QAAQ,UAAUC,SAAO,EAACC,UAAW,cAAC,IAAD,IAA1C,uB,udCnBF,IAAMI,EAAU7I,IAAOC,IAAV,KAOD,qBAAGE,MAAkBC,OAAOM,WAIlCoI,EAAkE,SAAC,GAA2B,IAAzBvC,EAAwB,EAAxBA,QAASwC,EAAe,EAAfA,SAClF,OACE,eAACF,EAAD,CAASG,aAAW,kCAAkCC,KAAK,SAAS1C,QAAS,kBAAMA,KAAnF,UACE,cAAC,IAAD,CAAM2C,MAAM,UAAUC,MAAI,EAA1B,SACGJ,EAAW,OAAS,YAEtBA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCD,EAAwBM,aAAe,CACrCL,UAAU,GAGGD,QCzBAO,EAPkB,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,mBAAoBC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,eAElEC,EAAiC,QAArBF,EAA6B,MAAQD,EADvCI,IAEVC,EAAaH,EAFHE,IAGhB,MAAM,GAAN,OAAUD,EAAV,YAAuBE,I,2WCYzB,IAAMd,EAAU7I,IAAOC,IAAV,KAIP2J,EAAqB5J,YAAO6J,IAAP7J,CAAH,KAGb,qBAAGG,MAAkBC,OAAO0J,QAQ3B,qBAAG3J,MAAkBC,OAAOM,WA6CzBqJ,EAzC0C,SAAC,GAUpD,EATJ9H,IASK,IARL+H,EAQI,EARJA,YACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,QACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,QACAd,EAGI,EAHJA,mBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,eAEMpD,EAAkBC,cAClBgE,EAAwBhB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,mBAE3Fc,EAAe,mDAA+CD,GAE5DE,EAAO,oDAAgDf,EAAeE,KAE5E,OACE,eAAC,EAAD,WACE,eAAC,IAAD,CAAMc,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOpE,EAAgB,IAAK,SAA5B,OACA,cAACwD,EAAD,CAAoBa,KAAMT,EAAcO,EAAUD,EAAlD,SACGF,QAGHF,GACA,eAAC,IAAD,CAAMM,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOpE,EAAgB,GAAI,mBAA3B,OACA,cAAC,IAAD,UAAO+D,OAGX,cAAC,IAAD,CAAMK,eAAe,aAArB,SACE,cAAC,IAAD,CAAME,UAAQ,EAACD,KAAMR,EAAgBd,MAAM,EAA3C,SACG/C,EAAgB,IAAK,2B,sNCzDhC,IAAMyC,EAAU7I,YAAO2K,IAAP3K,CAAH,KAMP4K,EAAgB5K,YAAO6K,IAAP7K,CAAH,KAmCJ8K,EA/BuC,SAAC,GAQhD,IAPLV,EAOI,EAPJA,QACAW,EAMI,EANJA,WAEAC,GAII,EALJC,KAKI,EAJJD,aACAzB,EAGI,EAHJA,iBACAS,EAEI,EAFJA,YACAkB,EACI,EADJA,WAEA,OACE,eAAC,EAAD,CAASV,eAAe,gBAAgBW,WAAW,SAASC,GAAG,OAA/D,UAEE,sBAAKC,MAAO,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,SAAU,YAA/C,UACE,cAAC,IAAD,CAAOC,IAAG,yBAAoBT,EAApB,QAAuCU,IAAKV,EAAaM,MAAOtB,EAAc,GAAK,GAAIuB,OAAQvB,EAAc,GAAK,MAC1HA,GAAe,qBAAKqB,MAAO,CAAEG,SAAU,WAAYF,MAAO,GAAIK,KAAM,GAAIC,IAAK,IAA9D,SACf,cAAC,IAAD,CAAOH,IAAG,yBAAoBlC,EAApB,QAA4CmC,IAAKnC,EAAkB+B,MAAO,GAAIC,OAAQ,UAGpG,eAAC,IAAD,CAAMM,cAAc,SAASV,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBhB,IACnB,eAAC,IAAD,CAAMI,eAAe,SAArB,UACkB,IAAfU,EAAmB,cAAC,IAAD,IAAe,KAGnC,cAACN,EAAD,CAAerC,QAAQ,UAAUC,SAAO,EAAxC,SAA0CuC,c,uFCmBrCe,EAnDmC,SAAC,GAE5C,IADL9F,EACI,EADJA,IAAK+F,EACD,EADCA,UAAWC,EACZ,EADYA,UACZ,IADuBC,iBACvB,MADmC,GACnC,MADuC9F,oBACvC,MADsD,EACtD,EADyD+F,EACzD,EADyDA,cACzD,EACkBC,mBAAS,IAD3B,mBACGC,EADH,KACQC,EADR,OAE8BF,oBAAS,GAFvC,mBAEGG,EAFH,KAEcC,EAFd,KAGEnG,EAAkBC,cAClBmG,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsB1G,EAAKkG,KACjC,CAAClG,EAAKkG,IAEHS,EAAenL,uBACnB,SAACoL,GACCP,EAAOO,EAAEC,cAAc7L,SAEzB,CAACqL,IAGGS,EAAkBtL,uBAAY,WAClC6K,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOU,MAAK,UAAK3G,EAAgB,IAAK,WAA1B,YAAwC6F,EAAxC,WAA4DD,UAAWA,EAAnF,UACE,cAACjG,EAAA,EAAD,CACE/E,MAAOoL,EACPlG,YAAa4G,EACbjM,SAAU8L,EACV3G,IAAKwG,EACLvG,OAAQgG,EACR9F,aAAcA,IAEhB,eAACnB,EAAA,EAAD,WACE,cAAC,IAAD,CAAQuD,QAAQ,YAAYhC,QAASyF,EAArC,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE4G,SAAUV,IAAcF,IAAQA,EAAIa,OACpC1G,QAAO,sBAAE,sBAAAnH,EAAA,6DACPmN,GAAa,GADN,SAEDR,EAAU,IAAIvF,IAAU4F,GAAK3F,MAAM,IAAID,IAAU,IAAI0G,IAAIhB,IAAgBxF,YAFxE,OAGP6F,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYlG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBCG5E+G,EAhDqC,SAAC,GAAkE,IAAhEpB,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,UAAWhG,EAAyC,EAAzCA,IAAyC,IAApCiG,iBAAoC,MAAxB,GAAwB,EAApBC,EAAoB,EAApBA,cAAoB,EAC9FC,mBAAS,IADqF,mBAC7GC,EAD6G,KACxGC,EADwG,OAElFF,oBAAS,GAFyE,mBAE7GG,EAF6G,KAElGC,EAFkG,KAG9GnG,EAAkBC,cAClBmG,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsB1G,EAAKkG,KACjC,CAAClG,EAAKkG,IAEHS,EAAenL,uBACnB,SAACoL,GACCP,EAAOO,EAAEC,cAAc7L,SAEzB,CAACqL,IAGGS,EAAkBtL,uBAAY,WAClC6K,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOU,MAAK,mBAAcd,GAAaD,UAAWA,EAAlD,UACE,cAACjG,EAAA,EAAD,CACEG,YAAa4G,EACbjM,SAAU8L,EACV3L,MAAOoL,EACPpG,IAAKwG,EACLvG,OAAQgG,IAEV,eAACjH,EAAA,EAAD,WACE,cAAC,IAAD,CAAQuD,QAAQ,YAAYhC,QAASyF,EAArC,SACG5F,EAAgB,IAAK,YAExB,cAAC,IAAD,CACE4G,SAAUV,IAAcF,IAAQA,EAAIa,OACpC1G,QAAO,sBAAE,sBAAAnH,EAAA,6DACPmN,GAAa,GADN,SAEDR,EAAU,IAAIvF,IAAU4F,GAAK3F,MAAM,IAAID,IAAU,IAAI0G,IAAIhB,IAAgBxF,YAFxE,OAGP6F,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAYlG,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oB,2HCpC3F,IAAMgH,GAAoBpN,IAAOC,IAAV,MA+DRoN,GAxDqC,SAAC,GAE9C,IADLC,EACI,EADJA,cAAeC,EACX,EADWA,aAActB,EACzB,EADyBA,UAAWhK,EACpC,EADoCA,IAAKkE,EACzC,EADyCA,aAAc+F,EACvD,EADuDA,cACvD,IADsEsB,mBACtE,MADoF,EACpF,EACEpH,EAAkBC,cAChBlC,EAAYC,YAASnC,GAArBkC,QACA4C,EAAcI,YAAWlF,GAAzB8E,UAEF0G,EAAmBC,YAAiBJ,EAAepB,GACnDyB,EAAiBF,EAAiBnH,iBAClCsH,EAAuB,IAAIpH,IAAUiH,GAAkBhH,MAAM+G,GAAaK,WAAWvH,oBAAewH,EAAW,CACnHC,sBAAuB,EACvBC,sBAAuB,IATrB,EAYuBC,YACzB,cAAC,EAAD,CACEjI,IAAKuH,EACLxB,UAAW5H,EACX8H,UAAWA,EACX9F,aAAcA,EACd+F,cAAeA,KANZgC,EAZH,sBAoBwBD,YAC1B,cAAC,EAAD,CACEjI,IAAKsH,EACLvB,UAAWhF,EACXkF,UAAWA,EACXC,cAAeA,KALZiC,EApBH,oBA2CJ,OACE,eAAC,IAAD,CAAM3D,eAAe,gBAAgBW,WAAW,SAAhD,UACE,eAAC,IAAD,CAAMU,cAAc,SAASV,WAAW,aAAaiD,WAAW,MAAhE,UACE,cAAC,IAAD,CAASlF,MAA4B,IAArBuE,EAAyB,eAAiB,OAA1D,SAAmEE,IACnE,eAAC,IAAD,CAAMU,SAAS,OAAOnF,MAA4B,IAArBuE,EAAyB,eAAiB,aAAvE,eAAwFG,EAAxF,UAlBwB,IAArBH,EACL,cAAC,IAAD,CAAQlH,QAAS2H,EAAjB,SAAoC9H,EAAgB,IAAK,WAEzD,eAACgH,GAAD,WACE,cAAC,IAAD,CAAY7E,QAAQ,WAAWhC,QAAS4H,EAAmBG,GAAG,MAA9D,SACE,cAAC,IAAD,CAAWpF,MAAM,cAEnB,cAAC,IAAD,CAAYX,QAAQ,WAAWhC,QAAS2H,EAAxC,SACE,cAAC,IAAD,CAAShF,MAAM,qB,2LCpDzB,IAAMqF,GAAqBvO,IAAOC,IAAV,MAkDTuO,GA3CuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUxM,EAAU,EAAVA,IAC3DmE,EAAkBC,cADmD,EAEzC8F,oBAAS,GAFgC,mBAEpEG,EAFoE,KAEzDC,EAFyD,KAGnEhL,EAAaN,aAAWgB,GAAxBV,SACA4C,EAAYC,YAASnC,GAArBkC,QAEFuK,EAAqBhB,YAAiBe,EAAUE,KAChDhB,EAAiBe,EAAmBpI,iBAE1C,OACE,eAAC,IAAD,CAAM8E,GAAG,MAAMZ,eAAe,gBAAgBW,WAAW,SAAzD,UACE,cAAC,IAAD,CAASjC,MAA8B,IAAvBwF,EAA2B,eAAiB,OAA5D,SAAqEf,IACrE,eAACY,GAAD,WACW,IAARtM,EACC,cAAC,IAAD,CACE+K,SAAiC,IAAvB0B,GAA4BpC,EACtC9H,KAAK,KACL+D,QAAQ,YACRqG,aAAa,OACbrI,QAAO,sBAAE,sBAAAnH,EAAA,6DACPmN,GAAa,GADN,SAEDpI,EAAQsK,EAAS/H,YAFhB,OAGP6F,GAAa,GAHN,2CALX,SAWGnG,EAAgB,IAAK,cAEtB,KACJ,cAAC,IAAD,CACE4G,SAAiC,IAAvB0B,GAA4BpC,EACtC/F,QAAO,sBAAE,sBAAAnH,EAAA,6DACPmN,GAAa,GADN,SAEDhL,IAFC,OAGPgL,GAAa,GAHN,2CAFX,SAQGnG,EAAgB,IAAK,oB,+FC5ChC,IAAMyI,GAAS7O,IAAOC,IAAV,MAoFG6O,GAvEqC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAU7P,EAAc,EAAdA,QAC/DiH,EAAkBC,cAD2D,EAEjC8F,oBAAS,GAFwB,mBAE5E8C,EAF4E,KAEzDC,EAFyD,OAGIC,YAAeJ,EAAK9M,KAAnGA,EAH2E,EAG3EA,IAAKmN,EAHsE,EAGtEA,YAAa5F,EAHyD,EAGzDA,eAAgBQ,EAHyC,EAGzCA,YAAa7D,EAH4B,EAG5BA,aAAc+F,EAHc,EAGdA,cAHc,EAItBmD,YAAYpN,GAAjE3C,EAJ2E,EAI3EA,UAAWiO,EAJgE,EAIhEA,aAAcD,EAJkD,EAIlDA,cAAemB,EAJmC,EAInCA,SAC1Ca,EAAYF,EAAY1F,IACxBhK,EAAe8J,EAAeE,IAC9B6F,EAASR,EAAKS,SAASC,cACvBC,EAAavQ,GAAWG,GAAaA,EAAUqQ,cAAc,GAE7D1Q,EAAawN,mBAAQ,WACzB,OAAIzC,EACKvL,YAAYuQ,EAAsBtP,GAEpCjB,YAAYuQ,EAAsBM,KACxC,CAACN,EAAUM,EAAW5P,EAAcsK,IAE/BjH,EAAcD,YAAW7D,GAAzB8D,UAEF6M,EAAgBpO,sBAAW,sBAAC,sBAAApC,EAAA,sEAE9B8P,GAAqB,GAFS,SAGxBnM,IAHwB,OAI9BmM,GAAqB,GAJS,gDAM9B7K,QAAQwL,MAAR,MAN8B,yDAQ/B,CAAC9M,IAmBJ,OACE,eAAC8L,GAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM1F,MAAI,EAAC2G,cAAc,YAAY5G,MAAM,YAAYmF,SAAS,OAAO0B,GAAG,MAA1E,kBAIA,cAAC,IAAD,CAAM5G,MAAI,EAAC2G,cAAc,YAAY5G,MAAM,aAAamF,SAAS,OAAjE,SACGjI,EAAgB,IAAK,eAG1B,cAAC,GAAD,CAAeqI,SAAUA,EAAUxM,IAAKA,IACxC,eAAC,IAAD,WACE,cAAC,IAAD,CAAMkH,MAAI,EAAC2G,cAAc,YAAY5G,MAAM,YAAYmF,SAAS,OAAO0B,GAAG,MAA1E,SACGR,IAEH,cAAC,IAAD,CAAMpG,MAAI,EAAC2G,cAAc,YAAY5G,MAAM,aAAamF,SAAS,OAAjE,SACGjI,EAAgB,IAAK,eAGxBjH,EApCGuQ,EACL,cAAC,GAAD,CACEpC,cAAeA,EACfC,aAAcA,EACdtB,UAAWsD,EACXtN,IAAKA,EACLkE,aAAcA,EACd+F,cAAelC,EAAckC,EAAgB,GAC7CsB,YAAauB,EAAKiB,eAEpB,cAAC,IAAD,CAAQC,GAAG,MAAMC,WAAS,EAAClD,SAAUiC,EAAmB1I,QAASqJ,EAAjE,SACGxJ,EAAgB,IAAK,sBAyBZ,cAAC+J,EAAA,EAAD,CAAcF,GAAG,MAAMC,WAAS,QC3FrCE,GAAwC,SAAC,GAA0C,IAF1EC,EAEkCC,EAAuC,EAAvCA,aAIhDC,EAJuF,EAAzBC,QAIrC,IACzBC,EAAsBH,EAHJ,IAKlBI,EAAY,IAP2E,EAAhBC,UAUvEC,EAAcF,EAAS,SAAI,EAAIH,EARb,QAQmEE,GAI3F,OAhBoBJ,EAeGO,EAAcF,EAfN/I,KAAKkJ,MAAe,IAATR,GAAgB,KAmB/CS,GAAc,SAAC,GAE1B,OAF+D,EAAnCC,aAAmC,EAArBC,eACW,KACnCC,QAAQ,I,8ZCF5B,IAAMC,GAAOlR,IAAOC,IAAV,MAOJkR,GAAWnR,IAAOC,IAAV,MAIRmR,GAAcpR,YAAOqR,IAAPrR,CAAH,MA0GFsR,GArG+C,SAAC,GAQxD,IAPLtF,EAOI,EAPJA,UACA5B,EAMI,EANJA,QACAd,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACAmH,EAEI,EAFJA,UACAY,EACI,EADJA,IAEMnL,EAAkBC,cAClBgE,EAAwBhB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,mBACzFgH,EAAUe,EAAI9K,MAAM,IAAID,IAAU,MAAMqH,WACxC2D,EAAgC,IAAOb,EAAU9C,WAEjD4D,EAA0BrB,GAAsC,CAAEE,aAAc,EAAGE,UAASG,cAC5Fe,EAA0BtB,GAAsC,CAAEE,aAAc,EAAGE,UAASG,cAC5FgB,EAA2BvB,GAAsC,CAAEE,aAAc,GAAIE,UAASG,cAC9FiB,EAA4BxB,GAAsC,CAAEE,aAAc,IAAKE,UAASG,cAEtG,OACE,eAAC,IAAD,CAAO5D,MAAM,MAAMf,UAAWA,EAA9B,UACE,eAACkF,GAAD,WACE,cAACC,GAAD,UACE,cAAC,IAAD,CAAM9C,SAAS,OAAOlF,MAAI,EAACD,MAAM,aAAa4G,cAAc,YAAY1E,GAAG,OAA3E,SACGhF,EAAgB,IAAK,iBAG1B,cAAC+K,GAAD,UACE,cAAC,IAAD,CAAM9C,SAAS,OAAOlF,MAAI,EAACD,MAAM,aAAa4G,cAAc,YAAY1E,GAAG,OAA3E,SACGhF,EAAgB,IAAK,WAG1B,cAAC+K,GAAD,UACE,cAAC,IAAD,CAAM9C,SAAS,OAAOlF,MAAI,EAACD,MAAM,aAAa4G,cAAc,YAAY1E,GAAG,OAA3E,SACGhF,EAAgB,IAAK,sBAI1B,cAAC+K,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGL,GAAY,CAAEC,aAAcU,EAAyBT,eAAgBQ,IADxE,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOM,MAGT,cAACN,GAAD,UACE,cAAC,IAAD,mBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGL,GAAY,CAAEC,aAAcW,EAAyBV,eAAgBQ,IADxE,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOO,MAGT,cAACP,GAAD,UACE,cAAC,IAAD,oBAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGL,GAAY,CAAEC,aAAcY,EAA0BX,eAAgBQ,IADzE,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOQ,MAGT,cAACR,GAAD,UACE,cAAC,IAAD,0BAEF,cAACA,GAAD,UACE,eAAC,IAAD,WACGL,GAAY,CAAEC,aAAca,EAA2BZ,eAAgBQ,IAD1E,SAIF,cAACL,GAAD,UACE,cAAC,IAAD,UAAOS,SAGX,cAACR,GAAD,CAAa/C,SAAS,OAAOnF,MAAM,aAAnC,SACG9C,EACC,IACA,sKAGJ,cAAC,IAAD,CAAMoE,eAAe,SAArB,SACE,eAAC,IAAD,CAAcC,KAAI,mDAA8CJ,GAAhE,UACGjE,EAAgB,IAAK,OADxB,IACiCgE,WCxF1ByH,GA1B6B,SAAC,GAOtC,IANLzH,EAMI,EANJA,QACAd,EAKI,EALJA,mBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACAmH,EAEI,EAFJA,UACAY,EACI,EADJA,IACI,EACwBtD,YAC1B,cAAC,GAAD,CACE7D,QAASA,EACTd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChBmH,UAAWA,EACXY,IAAKA,KAPFO,EADH,oBAYJ,OACE,cAAC,IAAD,CAAYvL,QAASuL,EAAmBvJ,QAAQ,OAAO/D,KAAK,KAAKuN,GAAG,MAApE,SACE,cAAC,IAAD,O,m+CClBN,IAAMC,GAAeC,YAAH,MAqCZC,IAzBmBlS,IAAOC,IAAV,KAcP+R,IAWDhS,IAAOC,IAAV,MAEK,SAACC,GAAD,OAAWA,EAAMC,MAAMgS,KAAKC,eAWtCC,GAAUrS,IAAOC,IAAV,MACS,qBAAGE,MAAkBC,OAAOkS,eAM5CC,GAAmBvS,IAAOC,IAAV,MACV,SAACC,GAAD,OAAYA,EAAM6I,SAAW,OAAS,SAiInCyJ,GApH2B,SAAC,GAA+D,IAA7DzD,EAA4D,EAA5DA,KAAM7E,EAAsD,EAAtDA,QAASyG,EAA6C,EAA7CA,UAAqB3B,GAAwB,EAAlCyD,SAAkC,EAAxBzD,UAAU7P,EAAc,EAAdA,QACnFiH,EAAkBC,cAD+E,EAG7C8F,oBAAS,GAHoC,mBAGhGuG,EAHgG,KAGzEC,EAHyE,KASjGC,EAAwBnG,mBAAQ,WACpC,OAAKsC,EAAK8D,qBAAwB9D,EAAK+D,gBAGhC,IAAItM,IAAUuI,EAAK8D,qBAAqBpM,MAAM,IAAID,IAAUuI,EAAK+D,kBAF/D,IAAItM,IAAU,KAGtB,CAACuI,EAAK8D,oBAAqB9D,EAAK+D,kBAE7B3I,EAAqB4I,OAAOH,GAAP,WACnBG,OAAOH,GAAYtM,oBAAewH,EAAW,CAAEE,sBAAuB,KAC1E,IAEE5D,EAAU2E,EAAKS,SAEfwD,EAAUjE,EAAKwC,KAAOxC,EAAKwC,IAAI9K,MAAM,IAAID,IAAU,MAAMqH,WAAWvH,oBAAewH,EAAW,CAClGC,sBAAuB,EACvBC,sBAAuB,IAGnBiF,EAAUlE,EAAKiB,cAAgB,IAAIxJ,IAAUuI,EAAKiB,cAAcnC,WAAWvH,oBAAewH,EAAW,CACzGC,sBAAuB,EACvBC,sBAAuB,IAGjB1E,EAA+DyF,EAA/DzF,mBAAoBC,EAA2CwF,EAA3CxF,iBAAkBC,EAAyBuF,EAAzBvF,eAAgByB,EAAS8D,EAAT9D,KAE9D,OACE,eAACiH,GAAD,WAEE,cAAC,EAAD,CACE9H,QAASA,EACTW,WAAYgE,EAAKhE,WACjBE,KAAMA,EACNC,WAAY6D,EAAK5I,aACjB6E,YAAa+D,EAAK/D,YAClBzB,iBAAkBwF,EAAKxF,iBACvBS,YAAa+E,EAAK/E,eAElBE,GACA,eAAC,IAAD,CAAMM,eAAe,gBAAgBW,WAAW,SAAhD,UACE,eAAC,IAAD,WAAO/E,EAAgB,IAAK,OAA5B,OACA,cAAC,IAAD,CAAM+C,MAAI,EAACkC,MAAO,CAAE6H,QAAS,OAAQ/H,WAAY,UAAjD,SACG4D,EAAKwC,IACJ,qCACE,cAAC,GAAD,CACEnH,QAASA,EACTd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChBmH,UAAWA,EACXY,IAAKxC,EAAKwC,MAEXyB,EATH,OAYA,cAAC,IAAD,CAAUzH,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMd,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOpE,EAAgB,IAAK,QAA5B,OACA,cAAC,IAAD,CAAM+C,MAAI,EAAV,SAjDY,YAmDd,eAAC,IAAD,CAAMqB,eAAe,gBAAgByF,GAAG,MAAxC,UACE,eAAC,IAAD,WAAO7J,EAAgB,MAAO,eAA9B,OACA,eAAC,IAAD,CAAM+C,MAAI,EAAV,UAAa4F,EAAK5I,aAAe,IAAjC,UAEF,eAAC,IAAD,CAAMqE,eAAe,gBAAgByF,GAAG,MAAxC,UACE,eAAC,IAAD,WAAO7J,EAAgB,KAAM,oBAA7B,OACA,cAAC,IAAD,CAAM+C,MAAI,EAAV,SAAY1B,YAAmBsH,EAAKoE,sBAEtC,eAAC,IAAD,CAAM3I,eAAe,gBAAgByF,GAAG,MAAxC,UACE,eAAC,IAAD,WAAOlB,EAAK/E,YAAL,UAAsB+E,EAAKS,SAA3B,qBAAP,QACA,eAAC,IAAD,CAAMrG,MAAI,EAAV,cAAa8J,QAMf,cAACG,GAAD,CAAsBrE,KAAMA,EAAMC,SAAUA,EAAU7P,QAASA,IAC/D,cAACkT,GAAD,IACA,cAAC,EAAD,CACE9L,QAAS,kBAAMoM,GAA0BD,IACzC3J,SAAU2J,IAEZ,cAACH,GAAD,CAAkBxJ,SAAU2J,EAA5B,SACE,cAAC,EAAD,CACEzQ,IAAK8M,EAAK9M,IACViI,QAASA,EACTF,YAAa+E,EAAK/E,YAClBC,eACE8E,EAAK/E,YAAL,oCAC+B+E,EAAKvF,eAAeE,KADnD,oCAG+BqF,EAAKK,YAAY1F,KAElDS,mBAAoBA,EACpBC,QAASA,EACTd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,U,qWChM1B,IAkBe6J,GAlBQ,WAAO,IAAD,EACFC,cAAjBC,EADmB,EACnBA,IAAKC,EADc,EACdA,QACPpN,EAAkBC,cAExB,OACE,cAAC,GAAD,UACE,eAAC,IAAD,CAAYoN,YAAaD,EAAU,EAAI,EAAGhP,KAAK,KAAK+D,QAAQ,SAA5D,UACE,cAAC,IAAD,CAAgBmL,GAAIC,KAAMC,GAAE,UAAKL,GAAjC,SACGnN,EAAgB,IAAK,UAExB,cAAC,IAAD,CAAgBsN,GAAIC,KAAMC,GAAE,UAAKL,EAAL,YAA5B,SACGnN,EAAgB,IAAK,oBAS1ByC,GAAU7I,IAAOC,IAAV,MAMSD,IAAOC,IAAV,KAMfoR,K,2WClBJ,IAAMwC,GAAY7T,IAAOC,IAAV,MAGJ,qBAAGE,MAAkBC,OAAO0J,QAQvB,qBAAG3J,MAAkBC,OAAO0T,cAMtCC,GAAa/T,IAAOC,IAAV,MAmCD+T,GA9BiB,SAAC,GAU1B,IATLhT,EASI,EATJA,MACAoJ,EAQI,EARJA,QACAd,EAOI,EAPJA,mBACAC,EAMI,EANJA,iBACAC,EAKI,EALJA,eACAmH,EAII,EAJJA,UACAsD,EAGI,EAHJA,cAGI,IAFJC,kBAEI,SACE9N,GADF,EADJ2I,KAEwB1I,eAClB8N,EAAanT,EAAK,UAAMA,EAAN,KAAiBoF,EAAgB,IAAK,cAE9D,OACE,eAACyN,GAAD,WACE,cAACE,GAAD,UAAaI,KACXD,GACA,cAAC,GAAD,CAAW9J,QAASA,EAClBd,mBAAoBA,EACpBC,iBAAkBA,EAClBC,eAAgBA,EAChBmH,UAAWA,EACXY,IAAK0C,Q,6dCpDf,IAAMG,GAAQpU,IAAO8F,KAAV,MACA,qBAAG3F,MAAkBC,OAAO0J,QAejC+J,IAXY7T,IAAOqU,IAAV,MAKX,qBAAGlU,MAAkBmU,aAAaC,MAMpBvU,IAAOC,IAAV,MAKX,qBAAGE,MAAkBmU,aAAaC,OA4CvBC,GAvCkC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOzS,EAAU,EAAVA,IACxDqL,EAAkB+B,YAAYpN,GAA9BqL,cACFlH,EAAkBC,cAClBoH,EAAmBC,YAAiBJ,GAEpCqH,EAASF,EAAMG,MAAM,KACrB5K,EAAgC,IAAlB2K,EAAOrP,OACrB0F,EAAc2J,EAAO,GAAGlF,cACxBlG,EAAmBS,EAAc,GAAK2K,EAAO,GAAGlF,cActD,OACE,eAAC,GAAD,WACE,sBAAKpE,MAAO,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,SAAU,YAA/C,UACE,cAAC,IAAD,CAAOC,IAAG,yBAAoBT,EAApB,QAAuCU,IAAKV,EAAaM,MAAOtB,EAAc,GAAK,GAAIuB,OAAQvB,EAAc,GAAK,MAC1HA,GAAe,qBAAKqB,MAAO,CAAEG,SAAU,WAAYF,MAAO,GAAIK,KAAM,GAAIC,IAAK,IAA9D,SACf,cAAC,IAAD,CAAOH,IAAG,yBAAoBlC,EAApB,QAA4CmC,IAAKnC,EAAkB+B,MAAO,GAAIC,OAAQ,UAIpG,sBAAKF,MAAO,CAAEwJ,WAAY,OAA1B,UApBEpH,EAEA,cAAC,IAAD,CAAMvE,MAAM,YAAYmF,SAAS,OAAOlF,MAAI,EAA5C,SACG/C,EAAgB,IAAK,aAKrB,KAcH,cAACgO,GAAD,UAAQM,W,kIChEhB,IAAMI,GAAS9U,IAAO8F,KAAV,MACD,gBAAGiP,EAAH,EAAGA,OAAQ5U,EAAX,EAAWA,MAAX,OAAwB4U,EAAS5U,EAAMC,OAAO0J,KAAO3J,EAAMC,OAAO4U,gBAW9DC,GANsC,SAAC,GAAkB,IAAhBxG,EAAe,EAAfA,SAChDd,EAA8B,OAAbc,EAAoBA,EAASnI,iBAAmB,IAEvE,OAAO,cAACwO,GAAD,CAAQC,OAAQtG,EAAhB,SAA2Bd,K,qUCTpC,IAAMkG,GAAY7T,IAAOC,IAAV,MAKJ,qBAAGE,MAAkBC,OAAOM,WAEnC,qBAAGP,MAAkBmU,aAAaC,MAKhCW,GAAYlV,YAAOmV,IAAPnV,CAAH,MACA,qBAAGoV,QAAyB,iBAAmB,eAgB/CC,GAZyB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAEnCC,GADWC,cAATC,KAGR,OACE,eAAC,GAAD,YACIF,GAAY,UACd,cAACL,GAAD,CAAWhM,MAAM,UAAUkM,QAASE,Q,i0BCzB1C,IAAMI,GAAiB1V,IAAOC,IAAV,MACJ,qBAAGE,MAAkBC,OAAOgS,cAGjC,qBAAGjS,MAAkBC,OAAO0J,QAK1B,qBAAG3J,MAAkBwV,SAASC,SAcd,qBAAGzV,MAAkBC,OAAOgS,cAQnDyB,GAAY7T,IAAOC,IAAV,KAGHyV,GAAkCA,IAc/BG,GATwC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAAS7Q,EAAe,EAAfA,SACjE,OACE,eAAC,GAAD,WACGA,EACD,cAACyQ,GAAD,UAAiBI,Q,yXCvCvB,IAAMC,GAAoB/V,IAAOC,IAAV,MACZ,qBAAGE,MAAkBC,OAAO0J,QAInC,qBAAG3J,MAAkBmU,aAAaC,MAKhCV,GAAY7T,IAAOC,IAAV,MAQX,qBAAGE,MAAkBmU,aAAaC,MAiCvByB,GA1B8C,SAAC,GAAoB,IAAlBjL,EAAiB,EAAjBA,WACxDkL,EAAmBlL,EAAaA,EAAWmL,cAAgB,IAC3D9P,EAAkBC,cAExB,OACE,eAAC,GAAD,WACE,cAAC0P,GAAD,UAAoBE,IACpB,cAAC,GAAD,CACEH,QACE,gCACG1P,EAAgB,IAAK,wEACtB,uBACA,uBACCA,EACC,IACA,6GARR,SAaE,cAAC,IAAD,CAAU8C,MAAM,qB,oYC7CxB,IAAMiN,GAAmBnW,IAAOC,IAAV,MAKlB,qBAAGE,MAAkBmU,aAAa8B,MAKhCvC,GAAY7T,IAAOC,IAAV,MAQX,qBAAGE,MAAkBmU,aAAa8B,MAyBvBC,GAlB4C,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACtDC,EAAmBD,EAAS,WAC1BvD,OAAOuD,GAAWhQ,oBAAewH,EAAW,CAAEE,sBAAuB,KACzE,IACE5H,EAAkBC,cAExB,OACE,eAAC,GAAD,WACE,cAAC8P,GAAD,UACE,cAAC,IAAD,UAAOI,MAET,cAAC,GAAD,CAAST,QAAS1P,EAAgB,IAAK,mEAAvC,SACE,cAAC,IAAD,CAAU8C,MAAM,qB,kfCvCxB,IAAMsN,GAAaxW,IAAOC,IAAV,MAKZ,qBAAGE,MAAkBmU,aAAa8B,MAKhCvC,GAAY7T,IAAOC,IAAV,MAQX,qBAAGE,MAAkBmU,aAAaC,MAOhCkC,GAAoBzW,YAAOqR,IAAPrR,CAAH,MACZ,qBAAGG,MAAmBuW,OAAS,QAAU,aAoBrCC,GAhBgC,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAChD,OACE,cAAC,GAAD,UACE,cAACJ,GAAD,UACW,IAARI,EACC,mCACE,eAACH,GAAD,WAAoBG,EAAM,IAA1B,SAGF,eAAC,IAAD,WAAOA,EAAM,IAAb,Y,2mCC9CH,IAAMC,GAAkB7W,IAAOC,IAAV,MAEN,qBAAGE,MAAkBC,OAAOC,SAM9C,qBAAGF,MAAkBmU,aAAaC,MAOlC,qBAAGpU,MAAkBmU,aAAa8B,MAQzBU,GAAe9W,IAAOC,IAAV,MAMZ8W,GAAQ/W,IAAO8F,KAAV,MACP,qBAAG3F,MAAkBC,OAAO4W,aAG1BC,GAASjX,IAAO8F,KAAV,MACR,qBAAG3F,MAAkBC,OAAO0T,cAG1BoD,GAAgBlX,IAAOC,IAAV,MAKbgV,GAASjV,IAAOC,IAAV,MAGR,qBAAGE,MAAkBC,OAAO0J,QAG1BqN,GAASnX,IAAOC,IAAV,MAER,qBAAGE,MAAkBC,OAAO0T,cCkCxBtF,GAvEqD,SAAC,GAAuB,IAArBvM,EAAoB,EAApBA,IAC7DwM,GADiF,EAAf2I,SACrD/H,YAAYpN,GAAzBwM,UACFkC,EAAY0G,cACd3I,EAAqB,EACrB4I,EAAe,EACf3J,EAAiB,IAEjBc,IACFC,EAAqBhB,YAAiBe,EAAUE,KAChD2I,EAAe,IAAI9Q,IAAUkI,GAAoB6I,aAAa5G,GAAW9C,WACzEF,EAAiBe,EAAmBpI,kBAVmD,MAavD6F,oBAAS,GAb8C,mBAalFG,EAbkF,KAavEC,EAbuE,KAcjFhL,EAAaN,aAAWgB,GAAxBV,SACA4C,EAAYC,YAASnC,GAArBkC,QACFiC,EAAkBC,cAhBiE,EAkB7DmR,sBAAW,CACrCC,MAAO,EACPC,IAAKJ,EACLK,SAAU,EACVC,UAAW,IACXC,SAAU,IALJC,EAlBiF,EAkBjFA,QAASC,EAlBwE,EAkBxEA,OAOXC,EAAcC,iBAAOF,GAM3B,OAJAG,qBAAU,WACRF,EAAYG,QAAQb,KACnB,CAACA,EAAcU,IAGhB,eAACnB,GAAD,WACE,eAACC,GAAD,WACE,cAACC,GAAD,oBACA,cAACE,GAAD,UAAS7Q,EAAgB,IAAK,eAEhC,eAAC8Q,GAAD,WACE,gCACE,cAAC,GAAD,UAASvJ,IACT,eAAC,GAAD,oBAAUmK,EAAV,aAEO,IAAR7V,EACC,cAAC,IAAD,CACE+K,SAAiC,IAAvB0B,GAA4BpC,EACtC/F,QAAO,sBAAE,sBAAAnH,EAAA,6DACPmN,GAAa,GADN,SAEDpI,EAAQsK,EAAS/H,YAFhB,OAGP6F,GAAa,GAHN,2CAKTwF,GAAG,MAPL,SASG3L,EAAgB,IAAK,cAEtB,KACJ,cAAC,IAAD,CACE4G,SAAiC,IAAvB0B,GAA4BpC,EACtC/F,QAAO,sBAAE,sBAAAnH,EAAA,6DACPmN,GAAa,GADN,SAEDhL,IAFC,OAGPgL,GAAa,GAHN,2CAKTwF,GAAG,MAPL,SASG3L,EAAgB,IAAK,oB,qGC3DhC,IAAMgH,GAAoBpN,IAAOC,IAAV,MAyIRkX,GArI8C,SAAC,GAOvD,IANLlV,EAMI,EANJA,IACAuN,EAKI,EALJA,SACAJ,EAII,EAJJA,YAGA5F,GACI,EAHJF,mBAGI,EAFJC,iBAEI,EADJC,gBAEMpD,EAAkBC,cADpB,EAGmEhF,cAA/DlC,EAHJ,EAGIA,QAAS6P,EAHb,EAGaA,SAHb,EAI8C7C,oBAAS,GAJvD,mBAIG8C,EAJH,KAIsBC,EAJtB,OAK+CG,YAAYpN,GAAvD3C,EALJ,EAKIA,UAAWiO,EALf,EAKeA,aAAcD,EAL7B,EAK6BA,cAC3ByB,EAAOI,YAAelN,GACpBkC,EAAYC,YAASnC,GAArBkC,QACA4C,EAAcI,YAAWlF,GAAzB8E,UAGFkM,GAFOmF,eAEG,IAAI5R,IAAUuI,EAAKiB,cAAcnC,YAC3C6B,EAAavQ,GAAWG,GAAaA,EAAUqQ,cAAc,GAE7DL,EAAYF,EAAY1F,IACxBhK,EAAe8J,EAAeE,IAE9B+D,EAAmBC,YAAiBJ,GACpCK,EAAiBF,EAAiBnH,iBAClC+R,GAAqBpF,EAAUxF,GAAkBnH,iBAnBnD,EAqBuB2H,YACzB,cAAC,EAAD,CACEjI,IAAKuH,EACLxB,UAAW5H,EACX8H,UAAWuD,EACXrJ,aAAc4I,EAAK5I,aACnB+F,cAAe6C,EAAK7C,iBANjBgC,EArBH,sBA8BwBD,YAC1B,cAAC,EAAD,CACEjI,IAAKsH,EACLvB,UAAWhF,EACXkF,UAAWuD,EACXtD,cAAe6C,EAAK7C,iBALjBiC,EA9BH,oBAsCElP,EAAawN,mBAAQ,WACzB,OAAIsC,EAAK/E,YACAvL,YAAYuQ,EAAsBtP,GAEpCjB,YAAYuQ,EAAsBM,KACxC,CAACN,EAAUM,EAAW5P,EAAcqP,EAAK/E,cAGpCjH,EAAcD,YAAW7D,GAAzB8D,UAEF6M,EAAgBpO,sBAAW,sBAAC,sBAAApC,EAAA,sEAE9B8P,GAAqB,GAFS,SAGxBnM,IAHwB,OAI9BmM,GAAqB,GAJS,gDAM9B7K,QAAQwL,MAAR,MAN8B,yDAQ/B,CAAC9M,IAEJ,OAAK5D,EAaDuQ,EACEjC,EAEA,eAACoJ,GAAD,WACE,eAACC,GAAD,WACE,eAACC,GAAD,WAAQvH,EAAR,OACA,cAACyH,GAAD,UAAS7Q,EAAgB,IAAK,eAEhC,eAAC8Q,GAAD,WACE,gCACE,cAAC,GAAD,UAASvJ,KACPoB,EAAK/E,aAAe,eAAC,GAAD,oBAAaqO,EAAb,aAExB,eAAC,GAAD,WACE,cAAC,IAAD,CAAY9P,QAAQ,YAAYhC,QAAS4H,EAAmBG,GAAG,MAA/D,SACE,cAAC,IAAD,CAAWpF,MAAM,cAEnB,cAAC,IAAD,CAAYX,QAAQ,YAAYhC,QAAS2H,EAAzC,SACE,cAAC,IAAD,CAAShF,MAAM,uBASzB,eAAC2N,GAAD,WACE,eAACC,GAAD,WACE,eAACG,GAAD,WAAS7Q,EAAgB,IAAK,SAA9B,OACA,cAAC2Q,GAAD,UAAQvH,OAEV,cAAC0H,GAAD,UACE,cAAC,IAAD,CAAQhH,WAAS,EAAC3J,QAAS2H,EAA3B,SACG9H,EAAgB,IAAK,gBAQ9B,eAACyQ,GAAD,WACE,cAACC,GAAD,UACE,cAACG,GAAD,UAAS7Q,EAAgB,IAAK,cAEhC,cAAC8Q,GAAD,UACE,cAAC,IAAD,CAAQhH,WAAS,EAAClD,SAAUiC,EAAmB1I,QAASqJ,EAAxD,SACGxJ,EAAgB,IAAK,iBA3D1B,eAACyQ,GAAD,WACE,cAACC,GAAD,UACE,cAACG,GAAD,UAAS7Q,EAAgB,IAAK,qBAEhC,cAAC8Q,GAAD,UACE,cAAC/G,EAAA,EAAD,CAAc7E,MAAM,e,q4DCzE9B,IAAMuI,GAAY7T,IAAOC,IAAV,MACC,qBAAGE,MAAkBC,OAAOgS,cAMxC,qBAAGjS,MAAkBmU,aAAa8B,MAMhCxM,GAAqB5J,YAAO6J,IAAP7J,CAAH,MAKlBsY,GAAatY,YAAO2T,IAAP3T,CAAH,MAKVuY,GAAiBvY,IAAOC,IAAV,MACT,qBAAGE,MAAkBC,OAAO0J,QAMnC,qBAAG3J,MAAkBmU,aAAaC,MAKhCiE,GAAmBxY,IAAOC,IAAV,MACX,qBAAGE,MAAkBC,OAAO0J,QAMnC,qBAAG3J,MAAkBmU,aAAaC,MAKzB,qBAAGpU,MAAkBC,OAAO0T,cAyBnC+C,IArBgB7W,IAAOC,IAAV,MAKf,qBAAGE,MAAkBmU,aAAaC,MAgBdvU,IAAOC,IAAV,MAIjB,qBAAGE,MAAkBmU,aAAaC,OAQhCkE,GAAgBzY,IAAOC,IAAV,MAIbyY,GAAiB1Y,IAAOC,IAAV,MAGhB,qBAAGE,MAAkBmU,aAAa8B,MAKhCuC,GAAe3Y,IAAOC,IAAV,MAwEH2Y,GAjEgD,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,IAAK/N,EAAiC,EAAjCA,WAAYuL,EAAqB,EAArBA,UAAWM,EAAU,EAAVA,IAC/F7H,EAAO8J,EAEPzS,EAAkBC,cAChBiD,EAA4EyF,EAA5EzF,mBAAoBC,EAAwDwF,EAAxDxF,iBAAkBC,EAAsCuF,EAAtCvF,eACxCY,GAD8E2E,EAAtB/D,YAAsB+D,EAATgK,KAC3DhK,EAAKS,UAAYT,EAAKS,SAASC,cAAcuJ,QAAQ,UAAW,KAC1E3O,EAAwBhB,EAAyB,CAAEC,qBAAoBC,mBAAkBC,mBAEzF8F,EAAYP,EAAKK,YAAY1F,IAC7BuP,EAAG,sCAAkC3J,GAErC2D,EAAU,IAAIzM,IAAUuI,EAAKiB,cAAcnC,WAC3CqL,EAAuBjG,EAAO,YAC3BF,OAAOE,GAAS3M,oBAAewH,EAAW,CAAEE,sBAAuB,KACxE,IAEE1D,EAAe,mDAA+CD,GAC9DE,EAAO,oDAAgDf,EAAeE,KAE5E,OACE,eAAC,GAAD,WACE,eAAC+O,GAAD,WACE,eAACF,GAAD,oBAEE,cAAC,GAAD,CAAoB9N,KAAMsE,EAAK/E,YAAcO,EAAUD,EAAvD,SAAyEF,QAKzE2E,EAAK/E,aACL,eAACwO,GAAD,uBAEE,sBAAMnN,MAAO,CAAEwJ,WAAY,OAA3B,SAAqCqE,OAGzC,cAACZ,GAAD,CAAY7N,KAAMwO,EAAKvO,UAAQ,EAA/B,SACGtE,EAAgB,IAAK,wBAG1B,eAACsS,GAAD,WACE,eAACC,GAAD,WACE,cAAC,IAAD,kBACA,cAAC,GAAD,eAASG,OAEX,eAACH,GAAD,WACE,cAAC,IAAD,UAAOvS,EAAgB,IAAK,gBAC5B,cAAC,GAAD,eAAgB2E,OAElB,eAAC4N,GAAD,WACE,cAAC,IAAD,UAAOvS,EAAgB,IAAK,eAC5B,cAAC,GAAD,eAAekQ,OAEjB,eAACqC,GAAD,WACE,cAAC,IAAD,UAAOvS,EAAgB,IAAK,iBAC5B,cAAC,GAAD,eAASwQ,UAGb,eAAC,GAAD,WACE,cAAC,GAAD,eAAmB7H,IACnB,cAACoK,GAAD,eAAkBpK,W,uSCtL1B,IC0HYqK,GD1HNhF,GAAQpU,IAAOC,IAAV,MAEA,qBAAGE,MAAkBC,OAAO0T,cAKjCuF,GAAmBrZ,IAAOC,IAAV,MAmBPqZ,GAT+B,SAAC,GAA8B,IAAD,IAA3B5E,aAA2B,MAAnB,GAAmB,EAAfzP,EAAe,EAAfA,SAC3D,OACE,gCACGyP,GAAS,cAAC,GAAD,UAAQA,IAClB,cAAC2E,GAAD,UAAmBpU,QCOZsU,GAAqB,CAChC,CACEC,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,OACRC,KAAM,OACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,MACNsQ,OAAQ,SACRC,KAAM,SACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,MACRC,KAAM,MACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,UACRC,KAAM,UACNC,cAAe,IACfC,UAAU,IAIDC,GAAyC,CACpD,CACEL,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,OACRC,KAAM,OACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,MACNsQ,OAAQ,SACRC,KAAM,SACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,MACRC,KAAM,MACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,SACRC,KAAM,YACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,aACRC,KAAM,aACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,MACRC,KAAM,MACNC,cAAe,IACfC,UAAU,GAEZ,CACEJ,GAAI,EACJrQ,KAAM,GACNsQ,OAAQ,UACRC,KAAM,UACNC,cAAe,IACfC,UAAU,I,gqBAIFR,K,cAAAA,E,aAAAA,Q,KClGZ,IAAMU,GAAQ,CACZhB,IAAK9E,GACLjF,KAAMyF,GACNO,OAAQE,GACR4D,QAASxD,GACTtK,WAAYiL,GACZM,UAAWD,GACXO,IAAKD,IAGDoD,GAAY/Z,IAAOC,IAAV,MAOX,qBAAGE,MAAkBmU,aAAa8B,MAKhC4D,GAAWha,IAAOia,GAAV,MAEe,qBAAG9Z,MAAkBC,OAAOkS,eAGnD4H,GAAmBla,IAAOma,GAAV,MAIhBC,GAAgBpa,IAAOma,GAAV,MAKbE,GAAiBra,IAAOma,GAAV,MAiILG,GA7HgC,SAACpa,GAAW,IACjD2Y,EAAY3Y,EAAZ2Y,QADgD,EAEJ1M,oBAAS,GAFL,mBAEjDmJ,EAFiD,KAE7BiF,EAF6B,KAGlDnU,EAAkBC,cAElBmU,EAAoB,WACxBD,GAAuBjF,IAGnBmF,EAAY,SAACC,GACjB,MAAY,SAARA,GAA0B,YAARA,EACb,GAGFA,GAd+C,EAiBjClF,cAAfC,EAjBgD,EAiBhDA,KAAMkF,EAjB0C,EAiB1CA,KAERpF,GAAYE,EAEZmF,GADcrF,EAAWgE,GAAqBM,IACpBtU,KAAI,SAACsV,GAAD,OAAYA,EAAOnB,QA0FvD,OACE,qCAxFKiB,EAsDH,eAACX,GAAD,CAAUzT,QAASiU,EAAnB,UACE,+BACE,6BACE,cAACH,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,eAAUna,EAAM6O,aAItB,+BACE,cAACmL,GAAD,UACE,cAAC,GAAD,CAAYxF,MAAOtO,EAAgB,IAAK,UAAxC,SACE,cAAC,GAAD,eAAYlG,EAAM6U,aAGtB,cAACqF,GAAD,UACE,cAAC,GAAD,CAAY1F,MAAOtO,EAAgB,IAAK,OAAxC,SACE,cAAC,GAAD,2BAASlG,EAAM4Y,KAAf,IAAoB5E,YAAU,eAKtC,6BACE,cAAC6F,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAASzE,mBAAoBA,aA7EnC,cAAC0E,GAAD,CAAUzT,QAASiU,EAAnB,SACGM,OAAOC,KAAK7a,GAAOqF,KAAI,SAACmV,GACvB,IAAkC,IAA9BE,EAAYI,QAAQN,GACtB,OAAO,KAGT,OAAQA,GACN,IAAK,UACH,OACE,6BACE,cAACX,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAASzE,mBAAoBA,SAH1BoF,GAQb,IAAK,MACH,OACE,6BACE,cAACX,GAAD,UACE,cAAC,GAAD,CAAYrF,MAAOtO,EAAgB,IAAK,OAAxC,SACE,cAAC,GAAD,2BAASlG,EAAM4Y,KAAf,IAAoB5E,WAAYqB,UAH7BmF,GAQb,IAAK,MACH,OACE,6BACE,cAACX,GAAD,UACE,cAAC,GAAD,CAAYrF,MAAOtO,EAAgB,MAAO,OAA1C,SACE,cAAC,GAAD,eAASlG,EAAM0W,WAHZ8D,GAQb,QACE,OACE,6BACE,cAACX,GAAD,UACE,cAAC,GAAD,CAAYrF,MAAO+F,EAAUC,GAA7B,SAAoCvV,IAAM8V,cAAcnB,GAAMY,GAAMxa,EAAMwa,SAFrEA,SAiDpBpF,GAAsBuD,GACrB,6BACE,oBAAIqC,QAAS,EAAb,SACE,cAAC,GAAD,eAAiBhb,Y,o7BC3K7B,IAAM2T,GAAY7T,IAAOC,IAAV,MACH,qBAAGE,MAAkBgS,KAAKgJ,cAEtB,qBAAGhb,MAAkBgS,KAAKC,cAKpCgJ,GAAepb,IAAOC,IAAV,MAQZob,GAAcrb,IAAOsb,MAAV,MASXC,GAAYvb,IAAOwb,MAAV,MASTC,GAAiBzb,IAAOC,IAAV,MAKdyb,GAAwB1b,IAAOC,IAAV,MAOZkF,OAAMwW,YAAW,SAACzb,GAC/B,IAAM0b,EAAiB3D,iBAAuB,MACxC7R,EAAkBC,cAChBwV,EAAkB3b,EAAlB2b,KAAMC,EAAY5b,EAAZ4b,QAENC,EAASC,YAASF,EAASD,EAAM,CAAEjC,UAAU,EAAMqC,WAAY,SAA/DF,KAQR,OACE,cAAC,GAAD,UACE,eAACN,GAAD,WACE,cAACL,GAAD,CAAcc,IAAKN,EAAnB,SACE,cAACP,GAAD,UACE,cAACE,GAAD,UACGQ,EAAKxW,KAAI,SAAC4W,GACT,OAAO,wBAAC,GAAD,2BAASA,EAAIC,UAAb,IAAuB1B,IAAG,oBAAeyB,EAAI3C,gBAK5D,cAACkC,GAAD,UACE,eAAC,IAAD,CAAQnV,QAnBI,WAClBqV,EAAezD,QAAQkE,eAAe,CACpCC,SAAU,YAiBN,UACGlW,EAAgB,IAAK,UACtB,cAAC,IAAD,CAAe8C,MAAM,sB,oIC7EjC,IAAM2K,GAAY7T,IAAOC,IAAV,MAGX,qBAAGE,MAAkBmU,aAAaC,MAwBvBgI,GAnB8C,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAClEC,EAAe,SAACC,GAChBH,IAAaG,GACfF,EAASE,IAIb,OACE,eAAC,GAAD,WACE,cAAC,IAAD,CAAYpU,QAAQ,OAAO/D,KAAK,KAAK+B,QAAS,kBAAMmW,EAAatD,GAASwD,OAA1E,SACE,cAAC,IAAD,CAAc1T,MAAOsT,IAAapD,GAASwD,KAAO,UAAY,mBAEhE,cAAC,IAAD,CAAYrU,QAAQ,OAAO/D,KAAK,KAAK+B,QAAS,kBAAMmW,EAAatD,GAASyD,QAA1E,SACE,cAAC,IAAD,CAAc3T,MAAOsT,IAAapD,GAASyD,MAAQ,UAAY,uB,otDC3BvE,IAAMC,GAAiB9c,IAAOC,IAAV,MAOJ,qBAAGE,MAAkB4c,QAAQC,SAE7B,qBAAG7c,MAAkBC,OAAOC,SAItC4c,GAAwBjd,IAAOC,IAAV,MAKX,qBAAGE,MAAkBC,OAAOC,SAC/B,qBAAGF,MAAkBwV,SAASuH,YAMvC,qBAAG/c,MAAkBmU,aAAaC,MAKhC4I,GAAoBnd,IAAOC,IAAV,MAEZ,qBAAGqL,SAEE,qBAAGnL,MAAkBC,OAAOC,SAKxC,qBAAGF,MAAkBmU,aAAaC,MAIlC,SAACrU,GAAD,OACAA,EAAMkd,QACNC,YADA,KAEIP,IAC2B,qBAAG3c,MAAkBC,OAAOkd,eACzC,qBAAGnd,MAAkB4c,QAAQQ,SAI3CN,IAIoB,qBAAG9c,MAAkBC,OAAOkd,eAGlC,qBAAGnd,MAAkB4c,QAAQQ,aAY7CC,GAAexd,IAAOyd,GAAV,MAIL,qBAAGtd,MAAkBwV,SAASuH,YAGrCQ,GAAW1d,IAAO2d,GAAV,MAII,qBAAGxd,MAAkBC,OAAOC,SA8D/Bud,GAhDsC,SAAC,GAA2B,IAAzBre,EAAwB,EAAxBA,QAASsB,EAAe,EAAfA,SACzDgd,EAAe5F,iBAAO,MACtB6F,EAAc7F,iBAAO,MAFmD,EAGlD9L,oBAAS,GAHyC,mBAGvEiR,EAHuE,KAG/DW,EAH+D,OAIlC5R,mBAAS5M,EAAQ,IAJiB,mBAIvEye,EAJuE,KAIvDC,EAJuD,OAKpC9R,mBAAS,CAAEb,MAAO,EAAGC,OAAQ,IALO,mBAKvE2S,EALuE,KAKxDC,EALwD,KAOxEC,EAAW,kBAAML,GAAWX,IAE5BiB,EAAkB,SAACC,GAAD,OAAyB,WAC/CL,EAAkBK,GAClBP,GAAU,GAENld,GACFA,EAASyd,KAWb,OAPApG,qBAAU,WACRiG,EAAiB,CACf7S,MAAOwS,EAAY3F,QAAQoG,YAC3BhT,OAAQuS,EAAY3F,QAAQqG,iBAE7B,IAGD,eAACrB,GAAD,yBAAmBC,OAAQA,EAAQlB,IAAK2B,GAAkBK,GAA1D,cAC2B,IAAxBA,EAAc5S,OACb,cAACwR,GAAD,CAAgBvW,QAAS6X,EAAzB,SACE,cAAC,IAAD,UAAOJ,EAAetJ,UAG1B,cAAC,IAAD,CAAmBxL,MAAM,OAAO3C,QAAS6X,IACzC,cAACnB,GAAD,UACE,cAACO,GAAD,CAActB,IAAK4B,EAAnB,SACGve,EAAQgG,KAAI,SAAC+Y,GAAD,OACXA,EAAO5J,QAAUsJ,EAAetJ,MAC9B,cAACgJ,GAAD,CAAUnX,QAAS8X,EAAgBC,GAAnC,SACE,cAAC,IAAD,UAAOA,EAAO5J,SADiC4J,EAAO5J,OAGtD,iB,oVCxIhB,IAAMjU,GAAcT,YAAOW,IAAPX,CAAH,MAKXye,GAAeze,IAAOC,IAAV,MAEd,qBAAGE,MAAkBmU,aAAaC,MAMhCV,GAAY7T,IAAOC,IAAV,MA0BAye,GAnBsB,SAAC,GAAyB,IAAvB1d,EAAsB,EAAtBA,MAAOH,EAAe,EAAfA,SAAe,EAC9BsL,oBAAS,GADqB,mBACrDiJ,EADqD,KAC5CuJ,EAD4C,KAEtDC,EAAU3G,iBAAO,MAEvB,OACE,cAAC,GAAD,CAAW7C,QAASA,EAApB,SACE,cAACqJ,GAAD,UACE,cAAChe,GAAD,CACEyb,IAAK0C,EACL5d,MAAOA,EACPH,SAAUA,EACVC,YAAY,eACZ+d,OAAQ,kBAAMF,GAAW,W,kvCCJf3e,IAAOqU,IAAV,MAAjB,IAKMyK,GAAmB9e,IAAOC,IAAV,MASlB,qBAAGE,MAAkBmU,aAAaC,MAOhCwK,GAAgB/e,IAAOC,IAAV,KAMfoR,KAKE2N,GAAehf,IAAOC,IAAV,KACZoR,KAKA4N,GAAkBjf,IAAOC,IAAV,MAMjB,qBAAGE,MAAkBmU,aAAaC,MAMhC2K,GAAelf,IAAOC,IAAV,MAWd,qBAAGE,MAAkBmU,aAAaC,MA2TvB4K,GAjTqB,SAACC,GAAgB,IAC3CC,EAAS/L,cAAT+L,KACAC,EAAaC,cAAbD,SACFlZ,EAAkBC,cAClBmZ,EAAUC,cACV9O,EAAY0G,cACZ5E,EAAWiN,cANiC,EAOxBvT,mBAAS,IAPe,mBAO3CwT,EAP2C,KAOpCC,EAPoC,OAQlBzT,mBAASiN,GAASwD,MARA,mBAQ3CJ,EAR2C,KAQjCqD,EARiC,OASd1T,mBAAS,WATK,mBAS3C2T,EAT2C,KAS/BC,EAT+B,OAUqB1e,cAA/DlC,EAV0C,EAU1CA,QAAS6P,EAViC,EAUjCA,SACTgR,EAAcZ,EAAdY,UAUF7e,EAAWC,cACT6e,EAAgBC,cAAhBD,YACR/H,qBAAU,WACJ/Y,GACFgC,EAASQ,YAAuBxC,MAEjC,CAACA,EAASgC,EAAU8e,IA3B2B,MA6Bd9T,oBAAS,GA7BK,mBA6B3CgU,EA7B2C,KA6B/BC,EA7B+B,KA+B5CC,EAAcb,EAAQc,QAAO,SAACvR,GAAD,QAAYA,EAAK/E,gBAAkBgW,GAAiC,OAApBjR,EAAKhE,cAClFwV,EAAgBf,EAAQc,QAAO,SAACvR,GAAD,QAAYA,EAAK/E,gBAAkBgW,GAAiC,OAApBjR,EAAKhE,cAEpFyV,EAAWvI,iBAAO,MAElBwI,EAAmBJ,EAAYC,QACnC,SAACvR,GAAD,OAAUA,EAAKqI,UAAY,IAAI5Q,IAAUuI,EAAKqI,SAAS9J,eAAeqC,cAAc,MA0BhF+Q,EAAYlf,uBAChB,SAACmf,GACC,IAAIC,EAA+CD,EAAepb,KAAI,SAACwJ,GAIrE,IAGM8R,EAHqB,IAAIra,IAAUuI,EAAK+R,cAAgB,GAC3Dra,MAAM,IAAID,IAAUuI,EAAKgS,aACzB9gB,IAAI,IAAIuG,IAAU,IAAI0G,IAAIyB,MACgBlI,MAAMua,KAG/CzP,EAAMZ,EAAUlK,MAAMoa,GAEpBjO,EAAa,IAAIpM,IAAUuI,EAAK8D,qBAAuB,GAAGpM,MAAMsI,EAAK+D,iBAQ3E,OANAzO,QAAQ4c,IAAI,eAAgBlS,EAAK+D,gBAAiB/D,EAAK8D,oBAAqBD,EAAWlM,WAAYqI,EAAKS,UAEpGoD,EAAWsO,WAAW,GAAK,IAC7B3P,EAAMA,EAAItR,IAAI2S,IAGT,2BAAK7D,GAAZ,IAAkBwC,WAGpB,GAAIoO,EAAO,CACT,IAAMwB,EAAiBxB,EAAMzJ,cAC7B0K,EAAwBA,EAAsBN,QAAO,SAACvR,GACpD,QAAIA,EAAKS,SAAS0G,cAAcpP,SAASqa,MAO7C,OAAOP,IAET,CAACjB,EAAOhP,IAIJyQ,GAAY9B,EAASxY,SAAS,WAChCua,EAAc,GASZC,IAFND,EAxEkB,SAACE,GACjB,OAAQzB,GACN,IAAK,UACH,OAAOyB,EAAMC,MAAK,SAACC,EAAOC,GACxB,OAAOD,EAAMlQ,IAAI5B,cAAc+R,EAAMnQ,MAAQ,EAAI,KAErD,IAAK,MACH,OAAOoQ,kBAAQJ,EAAO,MAAO,QAC/B,IAAK,aACH,OAAOI,kBAAQJ,GAAO,SAACxS,GAAD,OAA+BA,EAAKhE,WAAagI,OAAOhE,EAAKhE,WAAW6W,MAAM,GAAI,IAAM,IAAG,QACnH,IAAK,SACH,OAAOD,kBAAQJ,GAAO,SAACxS,GAAD,OAAgCA,EAAKqI,SAAWrI,EAAKqI,SAAS3I,SAAW,IAAI,QACrG,IAAK,YACH,OAAOkT,kBAAQJ,GAAO,SAACxS,GAAD,OACpBgE,OAAO,IAAIvM,IAAUuI,EAAK+D,iBAAiBrM,MAAM,IAAID,IAAUuI,EAAK8D,sBAAsBhF,cAAa,QAC3G,QACE,OAAO0T,GAwDCM,CALZR,EAA2BX,EADzBU,EACYjB,EAAuBM,EAA8BJ,EAE3CE,KAKEhb,KAAI,SAACwJ,GAAU,IAIrC6D,EAHItJ,EAAyDyF,EAAzDzF,mBAAoBC,EAAqCwF,EAArCxF,iBAAkBC,EAAmBuF,EAAnBvF,eACxCY,EAAU2E,EAAKS,UAAYT,EAAKS,SAASC,cAAcuJ,QAAQ,UAAW,IA4ChF,OAtCEpG,EAHG7D,EAAK8D,oBAGK,IAAIrM,IAAUuI,EAAK8D,qBAAqBpM,MAAMsI,EAAK+D,iBAFnD,KAKO,CACpBgG,IAAK,CACH9X,MAAO+N,EAAKwC,IACRxC,EAAKwC,KAAOxC,EAAKwC,IAAI9K,MAAM,IAAID,IAAU,MAAMqH,WAAWvH,eAAe,SAASsb,MAAM,GAAI,GAC5F,KACJ7W,WAAYgE,EAAKhE,WACjBX,UACAd,qBACAC,mBACAC,iBACAmH,YACAsD,cAAelF,EAAKwC,IACpBxC,QAEFA,KAAM,CACJ0F,MAAO1F,EAAKS,SAASoF,MAAM,KAAK,GAAGkN,oBACnCpN,MAAOtK,EACPnI,IAAK8M,EAAK9M,KAEZ8S,OAAQ,CACNtG,SAAUM,EAAKqI,SAAW1J,YAAiB,IAAIlH,IAAUuI,EAAKqI,SAAS3I,WAAa,KACpFxM,IAAK8M,EAAK9M,KAEZqU,UAAW,CACTA,UAAWvD,OAAOH,IAEpBgE,IAAK,CACHA,IAAK7H,EAAK5I,cAEZ4E,WAAY,CACVA,WAAYgE,EAAKhE,YAEnB8N,QAAS9J,MAsEb,OACE,eAACgT,EAAA,EAAD,WACE,cAAC,IAAD,CAASrO,GAAG,KAAKlP,KAAK,KAAK0E,MAAM,UAAUkC,GAAG,OAAOC,MAAO,CAAE2W,UAAW,UAAzE,SAGM5b,EAAgB,IADlB4Z,EACuB,QAEA,WAG3B,cAAC,IAAD,CAAStM,GAAG,KAAKlP,KAAK,KAAK0E,MAAM,YAAYkC,GAAG,OAAOC,MAAO,CAAE2W,UAAW,UAA3E,SAGM5b,EAAgB,IADlB4Z,EACuB,4BAEA,kCAM3B,eAAClB,GAAD,WACE,eAACI,GAAD,WACE,cAAC,GAAD,CAAY1C,SAAUA,EAAUC,SAAU,SAACE,GAAD,OAAoBkD,EAAYlD,MAC1E,eAAC,GAAD,WACE,cAAC,IAAD,CAAQsF,QAAS9B,EAAY+B,MAAM,KAAKrhB,SAAU,kBAAMuf,GAAeD,MACvE,eAAC,IAAD,eAAQ/Z,EAAgB,KAAM,qBAEhC,cAAC,GAAD,OAEF,eAAC6Y,GAAD,WACE,eAACD,GAAD,WACE,cAAC,IAAD,sBACA,cAAC,GAAD,CACEzf,QAAS,CACP,CACEmV,MAAO,UACP1T,MAAO,WAET,CACE0T,MAAO,MACP1T,MAAO,OAET,CACE0T,MAAO,aACP1T,MAAO,cAET,CACE0T,MAAO,SACP1T,MAAO,UAET,CACE0T,MAAO,YACP1T,MAAO,aAET,CACE0T,MAAO,OACP1T,MAAO,SAGXH,SA9QmB,SAACyd,GAC9ByB,EAAczB,EAAOtd,aAgRf,eAACge,GAAD,CAAc3T,MAAO,CAAEwJ,WAAY,IAAnC,UACE,cAAC,IAAD,qBACA,cAAC,GAAD,CAAahU,SAvRG,SAACshB,GACzBvC,EAASuC,EAAMC,OAAOphB,QAsR4BA,MAAO2e,aAjIrC,WACpB,GAAInD,IAAapD,GAASyD,OAASyE,GAAQhc,OAAQ,CACjD,IAEMwW,EAFejC,GAEQtU,KAAI,SAACsV,GAAD,MAAa,CAC5CrB,GAAIqB,EAAOrB,GACXE,KAAMmB,EAAOnB,KACbhF,MAAOmG,EAAOpB,OACd+H,KAAM,SAACpiB,EAAsBijB,GAC3B,OAAQxH,EAAOnB,MACb,IAAK,OACH,OAAO2I,EAAE7I,GAAKpa,EAAEoa,GAClB,IAAK,MACH,OAAIpa,EAAEgd,SAAStD,IAAI9X,OAASqhB,EAAEjG,SAAStD,IAAI9X,MAClC+R,OAAO3T,EAAEgd,SAAStD,IAAI9X,OAAS+R,OAAOsP,EAAEjG,SAAStD,IAAI9X,OAGvD,EACT,IAAK,SACH,OAAO5B,EAAEgd,SAASrH,OAAOtG,SAAW4T,EAAEjG,SAASrH,OAAOtG,SACxD,QACE,OAAO,IAGbmL,SAAUiB,EAAOjB,aAGnB,OAAO,cAAC,GAAD,CAAOiC,KAAMyF,GAASpF,IAAKsE,EAAU1E,QAASA,IAGvD,OACE,8BACE,eAACnR,EAAA,EAAD,WACE,cAAC,IAAD,CAAO2X,OAAK,EAACjD,KAAI,UAAKA,GAAtB,SACGgC,EAAY9b,KAAI,SAACwJ,GAAD,OACf,cAAC,GAAD,CAEEA,KAAMA,EACN0D,SAAUA,EACV9B,UAAWA,EACX3B,SAAUA,EACV7P,QAASA,EACT+K,SAAS,GANJ6E,EAAK9M,UAUhB,cAAC,IAAD,CAAOqgB,OAAK,EAACjD,KAAI,UAAKA,EAAL,YAAjB,SACGgC,EAAY9b,KAAI,SAACwJ,GAAD,OACf,cAAC,GAAD,CAEEA,KAAMA,EACN0D,SAAUA,EACV9B,UAAWA,EACX3B,SAAUA,EACV7P,QAASA,EACT+K,SAAO,GANF6E,EAAK9M,eAoFnBsgB","file":"static/js/8.9454f97e.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = []\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2592000\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\nexport const getShortFormatTime = (seconds: number) => {\r\n  if (seconds >= MONTH_IN_SECONDS) {\r\n    return `${Math.ceil(seconds / MONTH_IN_SECONDS)} Month(s)`\r\n  }\r\n  if (seconds >= DAY_IN_SECONDS) {\r\n    return `${Math.ceil(seconds / DAY_IN_SECONDS)} Day(s)`\r\n  }\r\n  if (seconds >= HOUR_IN_SECONDS) {\r\n    return `${Math.ceil(seconds / HOUR_IN_SECONDS)} Hour(s)`\r\n  }\r\n  if (seconds >= MINUTE_IN_SECONDS) {\r\n    return `${Math.ceil(seconds / MINUTE_IN_SECONDS)} Minute(s)`\r\n  }\r\n  \r\n  return `${Math.ceil(seconds)} Second(s)`\r\n  \r\n}\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = seconds\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  pid: number\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  pid,\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  let liquidityAddUrl = `https://dev.dex.tremendousswap.com/#/add/${liquidityUrlPathParts}`\r\n  \r\n  const swapUrl = `https://dev.dex.tremendousswap.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={isTokenOnly ? swapUrl : liquidityAddUrl}>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  tokenSymbol?: string\r\n  quoteTokenSymbol?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  tokenSymbol,\r\n  quoteTokenSymbol,\r\n  isTokenOnly,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      {/* <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} /> */}\r\n      <div style={{ width: 60, height: 60, position: 'relative' }} >\r\n        <Image src={`/images/tokens/${tokenSymbol}.png`} alt={tokenSymbol} width={isTokenOnly ? 60 : 40} height={isTokenOnly ? 60 : 40} />\r\n        {!isTokenOnly && <div style={{ position: 'absolute', width: 40, left: 20, top: 20 }} >\r\n          <Image src={`/images/tokens/${quoteTokenSymbol}.png`} alt={quoteTokenSymbol} width={40} height={40} />\r\n        </div>}\r\n      </div>\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"primary\" outline>{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n  tokenDecimals: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0, tokenDecimals\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenDecimals)\r\n  }, [max, tokenDecimals])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !val || !val.trim()}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(new BigNumber(val).times(new BigNumber(10).pow(tokenDecimals)).toString())\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  tokenDecimals: number\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', tokenDecimals }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenDecimals)\r\n  }, [max, tokenDecimals])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !val || !val.trim()}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(new BigNumber(val).times(new BigNumber(10).pow(tokenDecimals)).toString())\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n  tokenDecimals: number\r\n  stakedPrice?: BigNumber\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance, tokenBalance, tokenName, pid, depositFeeBP, tokenDecimals, stakedPrice = 0\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance, tokenDecimals)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n  const displayBalanceInBUSD = new BigNumber(rawStakedBalance).times(stakedPrice).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 5,\r\n  })\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={onStake}\r\n      tokenName={tokenName}\r\n      depositFeeBP={depositFeeBP}\r\n      tokenDecimals={tokenDecimals} />\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={onUnstake}\r\n      tokenName={tokenName}\r\n      tokenDecimals={tokenDecimals} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\" paddingTop=\"5px\">\r\n        <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        <Text fontSize=\"13px\" color={rawStakedBalance === 0 ? 'textDisabled' : 'textSubtle'}>(${displayBalanceInBUSD})</Text>\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport { CAKE_DECIMALS } from 'config'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings, CAKE_DECIMALS)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 8 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(earnings.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP, tokenDecimals } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        depositFeeBP={depositFeeBP}\r\n        tokenDecimals={isTokenOnly ? tokenDecimals : 18}\r\n        stakedPrice={farm.lpTokenPrice} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          TMDS\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'TMDS per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://dev.dex.tremendousswap.com/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getShortFormatTime } from 'utils/getTimePeriods'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  \r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPrice) {\r\n      return new BigNumber(0)\r\n    }\r\n    return new BigNumber(farm.lpTotalInQuoteToken).times(new BigNumber(farm.quoteTokenPrice))\r\n  }, [farm.lpTotalInQuoteToken, farm.quoteTokenPrice])\r\n\r\n  const totalValueFormated = Number(totalValue)\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'TMDS'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const lpPrice = farm.lpTokenPrice && new BigNumber(farm.lpTokenPrice).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 5,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {/* {farm.tokenSymbol === 'GLOCSW' && <StyledCardAccent />} */}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        tokenSymbol={farm.tokenSymbol}\r\n        quoteTokenSymbol={farm.quoteTokenSymbol}\r\n        isTokenOnly={farm.isTokenOnly}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between' mt=\"5px\">\r\n        <Text>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between' mt=\"5px\">\r\n        <Text>{TranslateString(9999, 'Harvest Interval')}:</Text>\r\n        <Text bold>{getShortFormatTime(farm.harvestInterval)}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between' mt=\"5px\">\r\n        <Text>{farm.isTokenOnly ? `${farm.lpSymbol} Price` : `LP Price`} :</Text>\r\n        <Text bold>${lpPrice}</Text>\r\n      </Flex>\r\n      {/* <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(999, 'Harvest Lockup')}:</Text>\r\n        <Text bold>{farm.harvestInterval / 3600} Hour(s)</Text>\r\n      </Flex> */}\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          pid={farm.pid}\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(999, 'Live')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(999, 'Finished')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address, FarmConfig, QuoteToken } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: number\n  multiplier: string\n  lpLabel: string\n  quoteTokenAdresses: Address\n  quoteTokenSymbol: QuoteToken\n  tokenAddresses: Address\n  cakePrice: BigNumber\n  originalValue: BigNumber\n  hideButton?: boolean\n  farm: FarmConfig\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n  farm,\n}) => {\n  const TranslateString = useI18n()\n  const displayApr = value ? `${value}%` : TranslateString(656, 'Loading...')\n  \n  return (\n    <Container>\n      <AprWrapper>{displayApr}</AprWrapper>\n      {!hideButton && (\n        <ApyButton lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          cakePrice={cakePrice}\n          apy={originalValue}\n        />\n      )}\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Image, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst Label = styled.span`\n  color: ${({ theme }) => theme.colors.text};\n  font-weight: 600;\n`\n\nconst IconImage = styled.img`\n  margin-right: 8px;\n  min-width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const tokens = image.split(\"-\")\n  const isTokenOnly = tokens.length === 1\n  const tokenSymbol = tokens[0].toUpperCase()\n  const quoteTokenSymbol = isTokenOnly ? \"\" : tokens[1].toUpperCase()\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <div style={{ width: 40, height: 40, position: 'relative' }} >\n        <Image src={`/images/tokens/${tokenSymbol}.png`} alt={tokenSymbol} width={isTokenOnly ? 40 : 30} height={isTokenOnly ? 40 : 30} />\n        {!isTokenOnly && <div style={{ position: 'absolute', width: 20, left: 15, top: 20 }} >\n          <Image src={`/images/tokens/${quoteTokenSymbol}.png`} alt={quoteTokenSymbol} width={20} height={20} />\n        </div>}\n      </div>\n      {/* <IconImage src={`/images/farms/${image}.png`} alt=\"icon\" /> */}\n      <div style={{ marginLeft: '8px' }}>\n        {handleRenderFarming()}\n        <Label>{label}</Label>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const displayBalance = earnings !== null ? earnings.toLocaleString() : '?'\n\n  return <Amount earned={earnings}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && 'Details'}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.colors.text};\n  width: max-content;\n  display: none;\n  padding: 16px;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.colors.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of TMDS rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 TMDS per block, a 40x farm would be getting 40 TMDS per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport ApyButton from '../FarmCard/ApyButton'\n\nexport interface FeeProps {\n  fee: number\n}\n\nconst FeeWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst TextFeeHightlight = styled(Text)`\n  color: ${({ theme }) => (theme.isDark ? 'white' : '#4bca4b')};\n  font-weight: bold;\n`\n\nconst Fee: React.FunctionComponent<FeeProps> = ({ fee }) => {\n  return (\n    <Container>\n      <FeeWrapper>\n        {fee === 0 ? (\n          <>\n            <TextFeeHightlight>{fee / 100}%</TextFeeHightlight>\n          </>\n        ) : (\n          <Text>{fee / 100}%</Text>\n        )}\n      </FeeWrapper>\n    </Container>\n  )\n}\n\nexport default Fee\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { useFarmUser, usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\nimport useStake from '../../../../../hooks/useStake'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\nimport { CAKE_DECIMALS } from 'config'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { earnings } = useFarmUser(pid)\n  const cakePrice = usePriceCakeBusd()\n  let rawEarningsBalance = 0\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earnings) {\n    rawEarningsBalance = getBalanceNumber(earnings, CAKE_DECIMALS)\n    earningsBusd = new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber()\n    displayBalance = rawEarningsBalance.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>TMDS </Title>\n        <Subtle>{TranslateString(739, 'EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>≈{countUp} USD</Staked>\n        </div>\n        {pid === 8 ? (\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(earnings.toString())\n              setPendingTx(false)\n            }}\n            ml=\"6px\"\n          >\n            {TranslateString(704, 'Compound')}\n          </Button>\n        ) : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"6px\"\n        >\n          {TranslateString(562, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { useFarmFromPid, useFarmUser, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\nimport BigNumber from 'bignumber.js'\nimport { getContract } from 'utils/erc20'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle, Staked as StakedTag } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const farm = useFarmFromPid(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const lpPrice = new BigNumber(farm.lpTokenPrice).toNumber()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n  const displayBalanceUsd = (lpPrice * rawStakedBalance).toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={onStake}\n      tokenName={lpSymbol}\n      depositFeeBP={farm.depositFeeBP}\n      tokenDecimals={farm.tokenDecimals}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={onUnstake}\n      tokenName={lpSymbol}\n      tokenDecimals={farm.tokenDecimals}\n    />)\n\n  const lpContract = useMemo(() => {\n    if (farm.isTokenOnly) {\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, farm.isTokenOnly])\n\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(737, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(738, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n              {!farm.isTokenOnly && <StakedTag>≈{displayBalanceUsd} USD</StakedTag>}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(735, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button fullWidth onClick={onPresentDeposit}>\n            {TranslateString(736, 'Stake')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(741, 'ENABLE')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\n          {TranslateString(741, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text, Link } from '@pancakeswap-libs/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\n\nimport BigNumber from 'bignumber.js'\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\nimport Fee, { FeeProps } from '../Fee'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  fee: FeeProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n  margin-left: 8px;\n`\n\nconst StyledLink = styled(Link)`\n  font-weight: 400;\n  margin-bottom: 6px;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 6px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst LpPriceContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 6px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n\n  span {\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity, fee }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, tokenSymbol, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://bscscan.com/address/${lpAddress}`\n\n  const lpPrice = new BigNumber(farm.lpTokenPrice).toNumber()\n  const lpTokenPriceFormated = lpPrice\n    ? `~$${Number(lpPrice).toLocaleString(undefined, { maximumFractionDigits: 5 })}`\n    : '-'\n\n  const liquidityAddUrl = `https://dev.dex.tremendousswap.com/#/add/${liquidityUrlPathParts}`\n  const swapUrl = `https://dev.dex.tremendousswap.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n\n  return (\n    <Container>\n      <InfoContainer>\n        <StakeContainer>\n          Stake:\n          <StyledLinkExternal href={farm.isTokenOnly ? swapUrl : liquidityAddUrl}>{lpLabel}</StyledLinkExternal>\n        </StakeContainer>\n        {/* <StyledLink href={info} external>\n          {TranslateString(999, 'Info site')}\n        </StyledLink> */}\n        {!farm.isTokenOnly && (\n          <LpPriceContainer>\n            LP Price:\n            <span style={{ marginLeft: \"5px\" }}>{lpTokenPriceFormated}</span>\n          </LpPriceContainer>\n        )}\n        <StyledLink href={bsc} external>\n          {TranslateString(999, 'View on BscScan')}\n        </StyledLink>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>APR</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Deposit fee')}</Text>\n          <Fee {...fee} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n  text-transform: uppercase;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  bold: string\n  normal: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema = [\n  {\n    id: 1,\n    bold: '',\n    normal: 'Farm',\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 2,\n    bold: 'HTZ',\n    normal: 'EARNED',\n    name: 'earned',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 3,\n    bold: '',\n    normal: 'APR',\n    name: 'apr',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 6,\n    bold: '',\n    normal: 'DETAILS',\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    bold: '',\n    normal: 'Farm',\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 2,\n    bold: 'HTZ',\n    normal: 'EARNED',\n    name: 'earned',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 3,\n    bold: '',\n    normal: 'APR',\n    name: 'apr',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 4,\n    bold: '',\n    normal: 'STAKED',\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 5,\n    bold: '',\n    normal: 'MULTIPLIER',\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 6,\n    bold: '',\n    normal: 'FEE',\n    name: 'fee',\n    translationId: 999,\n    sortable: true,\n  },\n  {\n    id: 7,\n    bold: '',\n    normal: 'DETAILS',\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport Fee, { FeeProps } from './Fee'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  fee: FeeProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n  fee: Fee,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const cellLabel = (key: string): string => {\n    if (key === 'farm' || key === 'details') {\n      return ''\n    }\n\n    return key\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            if (columnNames.indexOf(key) === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(999, 'Apr')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'fee':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(10001, 'Fee')}>\n                        <Fee {...props.fee} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={cellLabel(key)}>{React.createElement(cells[key], props[key])}</CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(999, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(999, 'Apr')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={7}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n}\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nexport default React.forwardRef((props: ITableProps) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button onClick={scrollToTop} >\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"text\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n})\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToogleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToogleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" size=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" size=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputBorder};\n        box-shadow: ${({ theme }) => theme.shadows.level1};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputBorder};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.shadows.level1};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.input};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React, { useEffect, useCallback, useRef, useState } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { orderBy } from 'lodash'\r\nimport { Image, Heading, Toggle, Text, RowType } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_DECIMALS, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport Select, { OptionProps } from './components/Select/Select'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\n\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst BannerImage = styled.img`\r\n  max-width: 300px;\r\n  height: auto;\r\n`\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 5px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useState(ViewMode.CARD) // ViewMode.CARD / TABLE\r\n  const [sortOption, setSortOption] = useState('default')\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps;\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const tableRef = useRef(null)\r\n\r\n  const stackedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n    switch (sortOption) {\r\n      case 'default':\r\n        return farms.sort((farm1, farm2) => {\r\n          return farm1.apy.isGreaterThan(farm2.apy) ? -1 : 1\r\n        })\r\n      case 'apr':\r\n        return orderBy(farms, 'apy', 'desc')\r\n      case 'multiplier':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0, 'desc')\r\n      case 'earned':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n      case 'liquidity':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) =>\r\n          Number(new BigNumber(farm.quoteTokenPrice).times(new BigNumber(farm.lpTotalInQuoteToken)).toNumber()), 'desc')\r\n      default:\r\n        return farms\r\n    }\r\n  }\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.tmdsPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(CAKE_DECIMALS))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        const totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0).times(farm.quoteTokenPrice);\r\n\r\n        console.log(\"total value \", farm.quoteTokenPrice, farm.lpTotalInQuoteToken, totalValue.toString(), farm.lpSymbol)\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\r\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\r\n            return true\r\n          }\r\n\r\n          return false\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPY\r\n    },\r\n    [query, cakePrice],\r\n  )\r\n\r\n\r\n  const isActive = !pathname.includes('history')\r\n  let farmsStaked = []\r\n  if (isActive) {\r\n    farmsStaked = stakedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\r\n  } else {\r\n    farmsStaked = farmsList(inactiveFarms)\r\n  }\r\n\r\n  farmsStaked = sortFarms(farmsStaked)\r\n\r\n  const rowData = farmsStaked.map((farm) => {\r\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n\r\n    let totalValue: BigNumber\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      totalValue = null\r\n    } else {\r\n      totalValue = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPrice)\r\n    }\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apy\r\n          ? farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\r\n          : null,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        quoteTokenAdresses,\r\n        quoteTokenSymbol,\r\n        tokenAddresses,\r\n        cakePrice,\r\n        originalValue: farm.apy,\r\n        farm,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: Number(totalValue),\r\n      },\r\n      fee: {\r\n        fee: farm.depositFeeBP,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.normal,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} ref={tableRef} columns={columns} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                bnbPrice={bnbPrice}\r\n                cakePrice={cakePrice}\r\n                ethereum={ethereum}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                bnbPrice={bnbPrice}\r\n                cakePrice={cakePrice}\r\n                ethereum={ethereum}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"xl\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(999, 'Pools')\r\n            :\r\n            TranslateString(999, 'Farms')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"secondary\" mb=\"30px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(999, 'Stake tokens to earn TMDS')\r\n            :\r\n            TranslateString(999, 'Stake LP tokens to earn TMDS')\r\n        }\r\n      </Heading>\r\n      {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(999, 'Deposit fees will be used for TMDS buyback and burn')}\r\n      </Heading> */}\r\n      <ControlContainer>\r\n        <ViewControls>\r\n          <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n          <ToggleWrapper>\r\n            <Toggle checked={stakedOnly} scale=\"sm\" onChange={() => setStakedOnly(!stakedOnly)} />\r\n            <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n          </ToggleWrapper>\r\n          <FarmTabButtons />\r\n        </ViewControls>\r\n        <FilterContainer>\r\n          <LabelWrapper>\r\n            <Text>SORT BY</Text>\r\n            <Select\r\n              options={[\r\n                {\r\n                  label: 'Default',\r\n                  value: 'default',\r\n                },\r\n                {\r\n                  label: 'APR',\r\n                  value: 'apr',\r\n                },\r\n                {\r\n                  label: 'Multiplier',\r\n                  value: 'multiplier',\r\n                },\r\n                {\r\n                  label: 'Earned',\r\n                  value: 'earned',\r\n                },\r\n                {\r\n                  label: 'Liquidity',\r\n                  value: 'liquidity',\r\n                },\r\n                {\r\n                  label: 'Fees',\r\n                  value: 'fees',\r\n                },\r\n              ]}\r\n              onChange={handleSortOptionChange}\r\n            />\r\n          </LabelWrapper>\r\n          <LabelWrapper style={{ marginLeft: 16 }}>\r\n            <Text>SEARCH</Text>\r\n            <SearchInput onChange={handleChangeQuery} value={query} />\r\n          </LabelWrapper>\r\n        </FilterContainer>\r\n      </ControlContainer>\r\n      {renderContent()}\r\n      {/* <div style={{ maxWidth: \"100%\", textAlign: 'center', marginTop: '25px' }}>\r\n        <BannerImage src=\"/images/egg/8.png\" alt=\"illustration\" />\r\n      </div> */}\r\n\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}