{"version":3,"sources":["utils/erc20.ts","hooks/useHarvest.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx","hooks/useParsedQueryString.ts"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","harvest","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousChef","handleHarvest","soushHarvestBnb","soushHarvest","updateUserPendingReward","updateUserBalance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","ethereum","fastRefresh","res","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","color","CakeHarvestBalance","earningsSum","TranslateString","useI18n","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","CAKE_DECIMALS","eggPrice","usePriceCakeBusd","toNumber","earning","pow","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","tmdsPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","parsedQs","search","useLocation","useMemo","parse","parseArrays","ignoreQueryPrefix","useParsedQueryString","ref","localStorage","setItem","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.c8dfc300.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingTmds',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize} color=\"text\">\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingTmds',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CAKE_DECIMALS } from 'config'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right -60px;\r\n  background-size: 330px;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()), CAKE_DECIMALS)\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(CAKE_DECIMALS)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(999, 'TMDS to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(999, 'TMDS in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(999, 'Collecting TMDS')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { CAKE_DECIMALS } from 'config'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply, CAKE_DECIMALS);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  let tmdsPerBlock = 0;\r\n  if(farms && farms[0] && farms[0].tmdsPerBlock){\r\n    tmdsPerBlock = new BigNumber(farms[0].tmdsPerBlock).div(new BigNumber(10).pow(CAKE_DECIMALS)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(999, 'TMDS Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap, CAKE_DECIMALS)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply, CAKE_DECIMALS)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance, CAKE_DECIMALS)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(999, 'New TMDS/block')}</Text>\r\n          <Text bold color=\"text\" fontSize=\"14px\">{tmdsPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'Tremendous_Coin'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\",\r\n            theme: \"dark\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-size: 115px;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 18px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-size: 140px;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst REFERRAL_KEY = 'GLOCSW_REFERRER'\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n  const parsedQs = useParsedQueryString()\r\n  useEffect(() => {\r\n    if (parsedQs && parsedQs.ref) {\r\n      localStorage.setItem(REFERRAL_KEY, parsedQs.ref)\r\n    }\r\n  }, [parsedQs])\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\r\n          {TranslateString(999, 'Tremendous Swap')}\r\n        </Heading>\r\n        <Text color=\"text\" fontSize=\"21px\">{TranslateString(999, 'A Fastest Growing Gem Coin Providing Decentralized Ecosystem.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { parse, ParsedQs } from 'qs'\r\nimport { useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nexport default function useParsedQueryString(): ParsedQs {\r\n  const { search } = useLocation()\r\n  return useMemo(\r\n    () => (search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}),\r\n    [search]\r\n  )\r\n}\r\n"],"sourceRoot":""}