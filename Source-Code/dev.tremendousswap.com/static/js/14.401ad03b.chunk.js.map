{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx","hooks/useParsedQueryString.ts"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","color","CakeHarvestBalance","earningsSum","TranslateString","useI18n","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","setBalance","ethereum","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","fswapPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","parsedQs","search","useLocation","useMemo","parse","parseArrays","ignoreQueryPrefix","useParsedQueryString","ref","localStorage","setItem","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/14.401ad03b.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingFSwap',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize} color=\"text\">\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingFSwap',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right -60px;\r\n  background-size: 330px;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(999, 'TMDS to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(999, 'TMDS in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(999, 'Collecting TMDS')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const eggPrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = eggPrice.times(circSupply);\r\n\r\n  let fswapPerBlock = 0;\r\n  if(farms && farms[0] && farms[0].fswapPerBlock){\r\n    fswapPerBlock = new BigNumber(farms[0].fswapPerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(999, 'TMDS Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">{TranslateString(999, 'New TMDS/block')}</Text>\r\n          <Text bold color=\"text\" fontSize=\"14px\">{fswapPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'Tremendous_Coin'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\",\r\n            theme: \"dark\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useParsedQueryString from 'hooks/useParsedQueryString'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-size: 115px;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 18px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-size: 140px;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst REFERRAL_KEY = 'GLOCSW_REFERRER'\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n  const parsedQs = useParsedQueryString()\r\n  useEffect(() => {\r\n    if (parsedQs && parsedQs.ref) {\r\n      localStorage.setItem(REFERRAL_KEY, parsedQs.ref)\r\n    }\r\n  }, [parsedQs])\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\r\n          {TranslateString(999, 'Tremendous Swap')}\r\n        </Heading>\r\n        <Text color=\"text\" fontSize=\"21px\">{TranslateString(999, 'A Fastest Growing Gem Coin Providing Decentralized Ecosystem.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { parse, ParsedQs } from 'qs'\r\nimport { useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nexport default function useParsedQueryString(): ParsedQs {\r\n  const { search } = useLocation()\r\n  return useMemo(\r\n    () => (search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}),\r\n    [search]\r\n  )\r\n}\r\n"],"sourceRoot":""}